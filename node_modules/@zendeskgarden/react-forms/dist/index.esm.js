/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

import React, { createContext, useContext, createElement, Children, useState, useRef, useMemo, useCallback, useEffect, useLayoutEffect, forwardRef } from 'react';
import PropTypes from 'prop-types';
import { useField } from '@zendeskgarden/container-field';
import styled, { css } from 'styled-components';
import { retrieveComponentStyles, DEFAULT_THEME, getLineHeight, getColor, withTheme, useDocument } from '@zendeskgarden/react-theming';
import { hideVisually, math, rgba, em } from 'polished';
import { composeEventHandlers, useCombinedRefs, KEY_CODES, getControlledValue } from '@zendeskgarden/container-utilities';
import debounce from 'lodash.debounce';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends$8() {
  _extends$8 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$8.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var FieldContext = createContext(undefined);
var useFieldContext = function useFieldContext() {
  var fieldContext = useContext(FieldContext);
  return fieldContext;
};

var _templateObject$D;
var COMPONENT_ID$C = 'forms.field';
var StyledField = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$C,
  'data-garden-version': '8.35.0'
})(_templateObject$D || (_templateObject$D = _taggedTemplateLiteral(["\n  position: relative; /* [1] */\n  direction: ", ";\n  margin: 0; /* [2] */\n  border: 0; /* [2] */\n  padding: 0; /* [2] */\n\n  ", ";\n"])), function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$C, props);
});
StyledField.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$C;
var COMPONENT_ID$B = 'forms.input_hint';
var StyledHint = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$B,
  'data-garden-version': '8.35.0'
})(_templateObject$C || (_templateObject$C = _taggedTemplateLiteral(["\n  direction: ", ";\n  display: block;\n  vertical-align: middle; /* support hint inline with input layout */\n  line-height: ", ";\n  color: ", ";\n  font-size: ", ";\n\n  ", ";\n"])), function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return getLineHeight(props.theme.space.base * 5, props.theme.fontSizes.md);
}, function (props) {
  return getColor('neutralHue', 600, props.theme);
}, function (props) {
  return props.theme.fontSizes.md;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$B, props);
});
StyledHint.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$B;
var COMPONENT_ID$A = 'forms.input_label';
var StyledLabel = styled.label.attrs({
  'data-garden-id': COMPONENT_ID$A,
  'data-garden-version': '8.35.0'
})(_templateObject$B || (_templateObject$B = _taggedTemplateLiteral(["\n  direction: ", ";\n  vertical-align: middle; /* support label inline with input layout */\n  line-height: ", ";\n  color: ", ";\n  font-size: ", ";\n  font-weight: ", ";\n\n  &[hidden] {\n    display: ", "; /* [1] */\n    vertical-align: ", ";\n    text-indent: ", ";\n    font-size: ", ";\n\n    ", ";\n  }\n\n  ", ";\n"])), function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return getLineHeight(props.theme.space.base * 5, props.theme.fontSizes.md);
}, function (props) {
  return props.theme.colors.foreground;
}, function (props) {
  return props.theme.fontSizes.md;
}, function (props) {
  return props.isRegular ? props.theme.fontWeights.regular : props.theme.fontWeights.semibold;
}, function (props) {
  return props.isRadio ? 'inline-block' : 'inline';
}, function (props) {
  return props.isRadio && 'top';
}, function (props) {
  return props.isRadio && '-100%';
}, function (props) {
  return props.isRadio && '0';
}, function (props) {
  return !props.isRadio && hideVisually();
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$A, props);
});
StyledLabel.defaultProps = {
  theme: DEFAULT_THEME
};

function _extends$7() { _extends$7 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$7.apply(this, arguments); }

var _ref$7 = /*#__PURE__*/createElement("g", {
  fill: "none",
  stroke: "currentColor"
}, /*#__PURE__*/createElement("circle", {
  cx: 7.5,
  cy: 8.5,
  r: 7
}), /*#__PURE__*/createElement("path", {
  strokeLinecap: "round",
  d: "M7.5 4.5V9"
}));

var _ref2$1 = /*#__PURE__*/createElement("circle", {
  cx: 7.5,
  cy: 12,
  r: 1,
  fill: "currentColor"
});

function SvgAlertErrorStroke(props) {
  return /*#__PURE__*/createElement("svg", _extends$7({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$7, _ref2$1);
}

function _extends$6() { _extends$6 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$6.apply(this, arguments); }

var _ref$6 = /*#__PURE__*/createElement("path", {
  fill: "none",
  stroke: "currentColor",
  strokeLinecap: "round",
  d: "M.88 13.77L7.06 1.86c.19-.36.7-.36.89 0l6.18 11.91c.17.33-.07.73-.44.73H1.32c-.37 0-.61-.4-.44-.73zM7.5 6v3.5"
});

var _ref2 = /*#__PURE__*/createElement("circle", {
  cx: 7.5,
  cy: 12,
  r: 1,
  fill: "currentColor"
});

function SvgAlertWarningStroke(props) {
  return /*#__PURE__*/createElement("svg", _extends$6({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$6, _ref2);
}

function _extends$5() { _extends$5 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$5.apply(this, arguments); }

var _ref$5 = /*#__PURE__*/createElement("g", {
  fill: "none",
  stroke: "currentColor"
}, /*#__PURE__*/createElement("path", {
  strokeLinecap: "round",
  strokeLinejoin: "round",
  d: "M4 9l2.5 2.5 5-5"
}), /*#__PURE__*/createElement("circle", {
  cx: 7.5,
  cy: 8.5,
  r: 7
}));

function SvgCheckCircleStroke(props) {
  return /*#__PURE__*/createElement("svg", _extends$5({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$5);
}

var _templateObject$A;
var MessageIcon = function MessageIcon(_ref) {
  var children = _ref.children,
      validation = _ref.validation,
      props = _objectWithoutProperties(_ref, ["children", "validation"]);
  var retVal;
  if (validation === 'error') {
    retVal = React.createElement(SvgAlertErrorStroke, props);
  } else if (validation === 'success') {
    retVal = React.createElement(SvgCheckCircleStroke, props);
  } else if (validation === 'warning') {
    retVal = React.createElement(SvgAlertWarningStroke, props);
  } else {
    retVal = React.cloneElement(Children.only(children));
  }
  return retVal;
};
var COMPONENT_ID$z = 'forms.input_message_icon';
var StyledMessageIcon = styled(MessageIcon).attrs({
  'data-garden-id': COMPONENT_ID$z,
  'data-garden-version': '8.35.0'
})(_templateObject$A || (_templateObject$A = _taggedTemplateLiteral(["\n  width: ", ";\n  height: ", ";\n\n  ", ";\n"])), function (props) {
  return props.theme.iconSizes.md;
}, function (props) {
  return props.theme.iconSizes.md;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$z, props);
});
StyledMessageIcon.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$z;
var validationStyles = function validationStyles(props) {
  var rtl = props.theme.rtl;
  var padding = math("".concat(props.theme.space.base, " * 2px + ").concat(props.theme.iconSizes.md));
  var color;
  if (props.validation === 'error') {
    color = getColor('dangerHue', 600, props.theme);
  } else if (props.validation === 'success') {
    color = getColor('successHue', 600, props.theme);
  } else if (props.validation === 'warning') {
    color = getColor('warningHue', 700, props.theme);
  } else {
    color = getColor('neutralHue', 700, props.theme);
  }
  return css(["padding-", ":", ";color:", ";"], rtl ? 'right' : 'left', props.validation && padding, color);
};
var COMPONENT_ID$y = 'forms.input_message';
var StyledMessage = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$y,
  'data-garden-version': '8.35.0'
})(_templateObject$z || (_templateObject$z = _taggedTemplateLiteral(["\n  direction: ", ";\n  display: inline-block;\n  position: relative;\n  vertical-align: middle; /* support message inline with input layout */\n  line-height: ", ";\n  font-size: ", ";\n\n  ", ";\n\n  & ", " {\n    position: absolute;\n    top: -1px;\n    ", ": 0;\n  }\n\n  /* stylelint-disable-next-line */\n  ", ":not([hidden]) + & {\n    display: block;\n    margin-top: ", ";\n  }\n\n  ", ";\n"])), function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return getLineHeight(props.theme.iconSizes.md, props.theme.fontSizes.sm);
}, function (props) {
  return props.theme.fontSizes.sm;
}, function (props) {
  return validationStyles(props);
}, StyledMessageIcon, function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, StyledLabel, function (props) {
  return math("".concat(props.theme.space.base, " * 1px"));
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$y, props);
});
StyledMessage.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$y;
var COMPONENT_ID$x = 'forms.input';
var isInvalid = function isInvalid(validation) {
  return validation === 'warning' || validation === 'error';
};
var colorStyles$a = function colorStyles(props) {
  var SHADE = 600;
  var placeholderColor = getColor('neutralHue', SHADE - 200, props.theme);
  var borderColor;
  var hoverBorderColor;
  var focusBorderColor;
  if (props.validation) {
    var hue;
    if (props.validation === 'success') {
      hue = 'successHue';
    } else if (props.validation === 'warning') {
      hue = 'warningHue';
    } else if (props.validation === 'error') {
      hue = 'dangerHue';
    }
    borderColor = getColor(hue, SHADE, props.theme);
    hoverBorderColor = borderColor;
    focusBorderColor = borderColor;
  } else {
    borderColor = getColor('neutralHue', SHADE - 300, props.theme);
    hoverBorderColor = getColor('primaryHue', SHADE, props.theme);
    focusBorderColor = hoverBorderColor;
  }
  var boxShadow = "\n    ".concat(props.focusInset ? 'inset' : '', "\n    ").concat(props.theme.shadows.md(rgba(focusBorderColor, 0.35)));
  var readOnlyBackgroundColor = getColor('neutralHue', SHADE - 500, props.theme);
  var readOnlyBorderColor = getColor('neutralHue', SHADE - 300, props.theme);
  var disabledBackgroundColor = readOnlyBackgroundColor;
  var disabledBorderColor = getColor('neutralHue', SHADE - 400, props.theme);
  var disabledForegroundColor = getColor('neutralHue', SHADE - 200, props.theme);
  var controlledBorderColor = borderColor;
  if (props.isFocused) {
    controlledBorderColor = focusBorderColor;
  }
  if (props.isHovered) {
    controlledBorderColor = hoverBorderColor;
  }
  return css(["border-color:", ";box-shadow:", ";background-color:", ";color:", ";&::placeholder{color:", ";}&[readonly],&[aria-readonly='true']{border-color:", ";background-color:", ";}&:hover{border-color:", ";}&:focus,&[data-garden-focus-visible='true']{border-color:", ";box-shadow:", ";}&:disabled,&[aria-disabled='true']{border-color:", ";background-color:", ";color:", ";}"], controlledBorderColor, !props.isBare && props.isFocused && boxShadow, props.isBare ? 'transparent' : props.theme.colors.background, props.theme.colors.foreground, placeholderColor, readOnlyBorderColor, !props.isBare && readOnlyBackgroundColor, hoverBorderColor, focusBorderColor, !props.isBare && boxShadow, disabledBorderColor, !props.isBare && disabledBackgroundColor, disabledForegroundColor);
};
var sizeStyles$d = function sizeStyles(props) {
  var fontSize = props.theme.fontSizes.md;
  var paddingHorizontal = "".concat(props.theme.space.base * 3, "px");
  var height;
  var paddingVertical;
  var browseFontSize;
  var swatchHeight;
  if (props.isCompact) {
    height = "".concat(props.theme.space.base * 8, "px");
    paddingVertical = "".concat(props.theme.space.base * 1.5, "px");
    browseFontSize = math("".concat(props.theme.fontSizes.sm, " - 1"));
    swatchHeight = "".concat(props.theme.space.base * 6, "px");
  } else {
    height = "".concat(props.theme.space.base * 10, "px");
    paddingVertical = "".concat(props.theme.space.base * 2.5, "px");
    browseFontSize = props.theme.fontSizes.sm;
    swatchHeight = "".concat(props.theme.space.base * 7, "px");
  }
  var lineHeight = math("".concat(height, " - (").concat(paddingVertical, " * 2) - (").concat(props.theme.borderWidths.sm, " * 2)"));
  var padding = props.isBare ? '0' : "".concat(em(paddingVertical, fontSize), " ").concat(em(paddingHorizontal, fontSize));
  var swatchMarginVertical = math("(".concat(lineHeight, " - ").concat(swatchHeight, ") / 2"));
  var swatchMarginHorizontal = math("".concat(paddingVertical, " + ").concat(swatchMarginVertical, " - ").concat(paddingHorizontal));
  return css(["padding:", ";min-height:", ";line-height:", ";font-size:", ";&::-ms-browse{font-size:", ";}&[type='date'],&[type='datetime-local'],&[type='file'],&[type='month'],&[type='time'],&[type='week']{max-height:", ";}&[type='file']{line-height:1;}@supports (-ms-ime-align:auto){&[type='color']{padding:", ";}}&::-moz-color-swatch{margin-top:", ";margin-left:", ";width:calc(100% + ", ");height:", ";}&::-webkit-color-swatch{margin:", " ", ";}", ":not([hidden]) + &,", " + &,", " + &,& + ", ",& + ", "{margin-top:", ";}"], padding, props.isBare ? '1em' : height, getLineHeight(lineHeight, fontSize), fontSize, browseFontSize, height, props.isCompact ? '0 2px' : '1px 3px', swatchMarginVertical, swatchMarginHorizontal, math("".concat(swatchMarginHorizontal, " * -2")), swatchHeight, swatchMarginVertical, swatchMarginHorizontal, StyledLabel, StyledHint, StyledMessage, StyledHint, StyledMessage, math("".concat(props.theme.space.base, " * ").concat(props.isCompact ? '1px' : '2px')));
};
var StyledTextInput = styled.input.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$x,
    'data-garden-version': '8.35.0',
    'aria-invalid': isInvalid(props.validation)
  };
})(_templateObject$y || (_templateObject$y = _taggedTemplateLiteral(["\n  appearance: none;\n  /* prettier-ignore */\n  transition:\n    border-color .25s ease-in-out,\n    box-shadow .1s ease-in-out,\n    background-color .25s ease-in-out,\n    color .25s ease-in-out;\n  direction: ", ";\n  border: ", ";\n  border-radius: ", ";\n  width: 100%; /* vs. display: block to limit mouse interaction area */\n  box-sizing: border-box;\n  vertical-align: middle; /* support inline label */\n  font-family: inherit;\n\n  &::-ms-browse {\n    border-radius: ", ";\n  }\n\n  &::-ms-clear,\n  &::-ms-reveal {\n    display: none; /* remove clear button and password reveal in IE */\n  }\n\n  &::-moz-color-swatch {\n    border: none;\n    border-radius: ", ";\n  }\n\n  &::-webkit-color-swatch {\n    border: none;\n    border-radius: ", ";\n  }\n\n  &::-webkit-color-swatch-wrapper {\n    padding: 0;\n  }\n\n  &::-webkit-clear-button,\n  &::-webkit-inner-spin-button,\n  &::-webkit-search-cancel-button,\n  &::-webkit-search-results-button {\n    display: none; /* remove non-standard browser features */\n  }\n\n  &::-webkit-datetime-edit {\n    direction: ", ";\n    line-height: 1;\n  }\n\n  &::placeholder {\n    opacity: 1;\n  }\n\n  &:invalid {\n    box-shadow: none; /* prevent FireFox validation styling */\n  }\n\n  &[type='file']::-ms-value {\n    display: none; /* remove file entry in IE */\n  }\n\n  /* stylelint-disable-next-line */\n  @media screen and (min--moz-device-pixel-ratio: 0) {\n    &[type='number'] {\n      appearance: textfield; /* remove number spinner in FireFox */\n    }\n  }\n\n  ", ";\n\n  &:focus {\n    outline: none;\n  }\n\n  /* Color (default and validation) styling */\n  ", ";\n\n  &:disabled {\n    cursor: default;\n  }\n\n  ", ";\n"])), function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return props.isBare ? 'none' : props.theme.borders.sm;
}, function (props) {
  return props.isBare ? '0' : props.theme.borderRadii.md;
}, function (props) {
  return props.theme.borderRadii.sm;
}, function (props) {
  return props.theme.borderRadii.sm;
}, function (props) {
  return props.theme.borderRadii.sm;
}, function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return sizeStyles$d(props);
}, function (props) {
  return colorStyles$a(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$x, props);
});
StyledTextInput.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$x;
var COMPONENT_ID$w = 'forms.textarea';
var hiddenStyles = "\n  visibility: hidden;\n  position: absolute;\n  overflow: hidden;\n  height: 0;\n  top: 0;\n  left: 0;\n  transform: translateZ(0);\n";
var StyledTextarea = styled(StyledTextInput).attrs({
  as: 'textarea',
  'data-garden-id': COMPONENT_ID$w,
  'data-garden-version': '8.35.0'
})(_templateObject$x || (_templateObject$x = _taggedTemplateLiteral(["\n  resize: ", ";\n  overflow: auto;\n  ", ";\n\n  ", ";\n"])), function (props) {
  return props.isResizable ? 'vertical' : 'none';
}, function (props) {
  return props.isHidden && hiddenStyles;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$w, props);
});
StyledTextarea.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$w;
var COMPONENT_ID$v = 'forms.media_figure';
var colorStyles$9 = function colorStyles(props) {
  var shade = 600;
  if (props.isDisabled) {
    shade = 400;
  } else if (props.isHovered || props.isFocused) {
    shade = 700;
  }
  return css(["color:", ";"], getColor('neutralHue', shade, props.theme));
};
var sizeStyles$c = function sizeStyles(props) {
  var size = props.theme.iconSizes.md;
  var marginFirst = "1px ".concat(props.theme.space.base * 2, "px auto 0");
  var marginLast = "1px 0 auto ".concat(props.theme.space.base * 2, "px");
  var margin;
  if (props.position === 'start') {
    margin = props.theme.rtl ? marginLast : marginFirst;
  } else {
    margin = props.theme.rtl ? marginFirst : marginLast;
  }
  return css(["margin:", ";width:", ";height:", ";"], margin, size, size);
};
var StyledTextMediaFigure = styled(
function (_ref) {
  var children = _ref.children;
      _ref.position;
      _ref.isHovered;
      _ref.isFocused;
      _ref.isDisabled;
      _ref.isRotated;
      _ref.theme;
      var props = _objectWithoutProperties(_ref, ["children", "position", "isHovered", "isFocused", "isDisabled", "isRotated", "theme"]);
  return React.cloneElement(Children.only(children), props);
}).attrs({
  'data-garden-id': COMPONENT_ID$v,
  'data-garden-version': '8.35.0'
})(_templateObject$w || (_templateObject$w = _taggedTemplateLiteral(["\n  transform: ", ";\n  /* prettier-ignore */\n  transition:\n    transform 0.25s ease-in-out,\n    color 0.25s ease-in-out;\n\n  ", ";\n\n  ", "\n\n  ", ";\n"])), function (props) {
  return props.isRotated && "rotate(".concat(props.theme.rtl ? '-' : '+', "180deg)");
}, function (props) {
  return colorStyles$9(props);
}, function (props) {
  return sizeStyles$c(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$v, props);
});
StyledTextMediaFigure.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$v;
var COMPONENT_ID$u = 'forms.faux_input';
var StyledTextFauxInput = styled(StyledTextInput).attrs(function (props) {
  return {
    as: 'div',
    'aria-readonly': props.isReadOnly,
    'aria-disabled': props.isDisabled,
    'data-garden-id': COMPONENT_ID$u,
    'data-garden-version': '8.35.0'
  };
})(_templateObject$v || (_templateObject$v = _taggedTemplateLiteral(["\n  display: ", ";\n  align-items: ", ";\n  cursor: ", ";\n  overflow: hidden;\n\n  & > ", " {\n    vertical-align: ", ";\n  }\n\n  & > ", " {\n    flex-shrink: ", ";\n  }\n\n  ", ";\n"])), function (props) {
  return props.mediaLayout ? 'inline-flex' : 'inline-block';
}, function (props) {
  return props.mediaLayout && 'baseline';
}, function (props) {
  return props.mediaLayout && !props.isDisabled ? 'text' : 'default';
}, StyledTextInput, function (props) {
  return !props.mediaLayout && 'baseline';
}, StyledTextMediaFigure, function (props) {
  return props.mediaLayout && '0';
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$u, props);
});
StyledTextFauxInput.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$u;
var COMPONENT_ID$t = 'forms.media_input';
var StyledTextMediaInput = styled(StyledTextInput).attrs({
  'data-garden-id': COMPONENT_ID$t,
  'data-garden-version': '8.35.0',
  isBare: true
})(_templateObject$u || (_templateObject$u = _taggedTemplateLiteral(["\n  flex-grow: 1;\n\n  ", ";\n"])), function (props) {
  return retrieveComponentStyles(COMPONENT_ID$t, props);
});
StyledTextMediaInput.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$t;
var COMPONENT_ID$s = 'forms.input_group';
var positionStyles$1 = function positionStyles(props) {
  var topMargin = "".concat(props.theme.space.base * (props.isCompact ? 1 : 2), "px");
  var startDirection = props.theme.rtl ? 'right' : 'left';
  var endDirection = props.theme.rtl ? 'left' : 'right';
  return css(["", ":not([hidden]) + &,", " + &,", " + &,& + ", ",& + ", "{margin-top:", ";}& > ", "{position:relative;flex:1 1 auto;margin-top:0;margin-bottom:0;width:auto;min-width:0;}& > ", ":not(:first-child){border-top-", "-radius:0;border-bottom-", "-radius:0;}& > ", ":not(:last-child){border-top-", "-radius:0;border-bottom-", "-radius:0;}"], StyledLabel, StyledHint, StyledMessage, StyledHint, StyledMessage, topMargin, StyledTextInput, StyledTextInput, startDirection, startDirection, StyledTextInput, endDirection, endDirection);
};
var itemStyles = function itemStyles(props) {
  return css(["& > *{margin-", ":-", ";}& > ", "{z-index:-1;}& > ", ":hover,& > button:hover,& > ", ":active,& > button:active{z-index:1;}& > button:disabled{z-index:-1;border-top-width:0;border-bottom-width:0;}& > ", ":disabled{z-index:-2;}& > *:first-child:not(:last-child){margin-", ":0;border-top-", "-radius:0;border-bottom-", "-radius:0;}& > *:last-child:not(:first-child){border-top-", "-radius:0;border-bottom-", "-radius:0;}& > *:not(:first-child):not(:last-child){border-radius:0;}"], props.theme.rtl ? 'right' : 'left', props.theme.borderWidths.sm, StyledTextInput, StyledTextInput, StyledTextInput, StyledTextInput, props.theme.rtl ? 'right' : 'left', props.theme.rtl ? 'left' : 'right', props.theme.rtl ? 'left' : 'right', props.theme.rtl ? 'right' : 'left', props.theme.rtl ? 'right' : 'left');
};
var StyledInputGroup = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$s,
  'data-garden-version': '8.35.0'
})(_templateObject$t || (_templateObject$t = _taggedTemplateLiteral(["\n  display: inline-flex;\n  position: relative;\n  flex-wrap: nowrap;\n  align-items: stretch;\n  z-index: 0;\n  width: 100%;\n\n  ", ";\n  ", ";\n\n  ", ";\n"])), function (props) {
  return positionStyles$1(props);
}, function (props) {
  return itemStyles(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$s, props);
});
StyledInputGroup.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$s;
var COMPONENT_ID$r = 'forms.radio_label';
var sizeStyles$b = function sizeStyles(props) {
  var size = props.theme.space.base * 4;
  var padding = size + props.theme.space.base * 2;
  var lineHeight = props.theme.space.base * 5;
  return css(["padding-", ":", "px;&[hidden]{padding-", ":", "px;line-height:", "px;}"], props.theme.rtl ? 'right' : 'left', padding, props.theme.rtl ? 'right' : 'left', size, lineHeight);
};
var StyledRadioLabel = styled(StyledLabel).attrs({
  'data-garden-id': COMPONENT_ID$r,
  'data-garden-version': '8.35.0',
  isRadio: true
})(_templateObject$s || (_templateObject$s = _taggedTemplateLiteral(["\n  display: inline-block; /* [1] */\n  position: relative;\n  cursor: pointer;\n  user-select: none;\n\n  ", ";\n\n  ", ";\n"])), function (props) {
  return sizeStyles$b(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$r, props);
});
StyledRadioLabel.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$r;
var COMPONENT_ID$q = 'forms.checkbox_label';
var StyledCheckLabel = styled(StyledRadioLabel).attrs({
  'data-garden-id': COMPONENT_ID$q,
  'data-garden-version': '8.35.0'
})(_templateObject$r || (_templateObject$r = _taggedTemplateLiteral(["\n  ", ";\n"])), function (props) {
  return retrieveComponentStyles(COMPONENT_ID$q, props);
});
StyledCheckLabel.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$q;
var COMPONENT_ID$p = 'forms.radio_hint';
var StyledRadioHint = styled(StyledHint).attrs({
  'data-garden-id': COMPONENT_ID$p,
  'data-garden-version': '8.35.0'
})(_templateObject$q || (_templateObject$q = _taggedTemplateLiteral(["\n  /* stylelint-disable-next-line */\n  padding-", ":\n    ", ";\n\n  ", ";\n"])), function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return math("".concat(props.theme.space.base, " * 6px"));
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$p, props);
});
StyledRadioHint.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$p;
var COMPONENT_ID$o = 'forms.checkbox_hint';
var StyledCheckHint = styled(StyledRadioHint).attrs({
  'data-garden-id': COMPONENT_ID$o,
  'data-garden-version': '8.35.0'
})(_templateObject$p || (_templateObject$p = _taggedTemplateLiteral(["\n  ", ";\n"])), function (props) {
  return retrieveComponentStyles(COMPONENT_ID$o, props);
});
StyledCheckHint.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$o;
var COMPONENT_ID$n = 'forms.radio';
var colorStyles$8 = function colorStyles(props) {
  var SHADE = 600;
  var borderColor = getColor('neutralHue', SHADE - 300, props.theme);
  var backgroundColor = props.theme.colors.background;
  var iconColor = backgroundColor;
  var hoverBackgroundColor = getColor('primaryHue', SHADE, props.theme, 0.08);
  var hoverBorderColor = getColor('primaryHue', SHADE, props.theme);
  var focusBorderColor = hoverBorderColor;
  var activeBackgroundColor = getColor('primaryHue', SHADE, props.theme, 0.2);
  var activeBorderColor = focusBorderColor;
  var boxShadow = props.theme.shadows.md(rgba(focusBorderColor, 0.35));
  var checkedBorderColor = focusBorderColor;
  var checkedBackgroundColor = checkedBorderColor;
  var checkedHoverBorderColor = getColor('primaryHue', SHADE + 100, props.theme);
  var checkedHoverBackgroundColor = checkedHoverBorderColor;
  var checkedActiveBorderColor = getColor('primaryHue', SHADE + 200, props.theme);
  var checkedActiveBackgroundColor = checkedActiveBorderColor;
  var disabledBackgroundColor = getColor('neutralHue', SHADE - 400, props.theme);
  return css(["& ~ ", "::before{border-color:", ";background-color:", ";}& ~ ", " > svg{color:", ";}& ~ ", ":hover::before{border-color:", ";background-color:", ";}&[data-garden-focus-visible='true'] ~ ", "::before{border-color:", ";box-shadow:", ";}& ~ ", ":active::before{border-color:", ";background-color:", ";}&:checked ~ ", "::before{border-color:", ";background-color:", ";}&:enabled:checked ~ ", ":hover::before{border-color:", ";background-color:", ";}&:enabled:checked ~ ", ":active::before{border-color:", ";background-color:", ";}&:disabled ~ ", "::before{border-color:transparent;background-color:", ";}"], StyledRadioLabel, borderColor, backgroundColor, StyledRadioLabel, iconColor, StyledRadioLabel, hoverBorderColor, hoverBackgroundColor, StyledRadioLabel, focusBorderColor, boxShadow, StyledRadioLabel, activeBorderColor, activeBackgroundColor, StyledRadioLabel, checkedBorderColor, checkedBackgroundColor, StyledRadioLabel, checkedHoverBorderColor, checkedHoverBackgroundColor, StyledRadioLabel, checkedActiveBorderColor, checkedActiveBackgroundColor, StyledRadioLabel, disabledBackgroundColor);
};
var sizeStyles$a = function sizeStyles(props) {
  var lineHeight = "".concat(props.theme.space.base * 5, "px");
  var size = "".concat(props.theme.space.base * 4, "px");
  var top = math("(".concat(lineHeight, " - ").concat(size, ") / 2"));
  var iconSize = props.theme.iconSizes.sm;
  var iconPosition = math("(".concat(size, " - ").concat(iconSize, ") / 2"));
  var iconTop = math("".concat(iconPosition, " + ").concat(top));
  return css(["& ~ ", "::before{top:", ";background-size:", ";width:", ";height:", ";box-sizing:border-box;}& ~ ", " > svg{top:", ";", ":", ";width:", ";height:", ";}"], StyledRadioLabel, top, props.theme.iconSizes.sm, size, size, StyledRadioLabel, iconTop, props.theme.rtl ? 'right' : 'left', iconPosition, iconSize, iconSize);
};
var StyledRadioInput = styled.input.attrs({
  'data-garden-id': COMPONENT_ID$n,
  'data-garden-version': '8.35.0',
  type: 'radio'
})(_templateObject$o || (_templateObject$o = _taggedTemplateLiteral(["\n  /* hide <input> but retain accessiblity */\n  position: absolute;\n  clip: rect(1px, 1px, 1px, 1px);\n\n  & ~ ", "::before {\n    position: absolute;\n    ", ": 0;\n    /* prettier-ignore */\n    transition:\n      border-color .25s ease-in-out,\n      box-shadow .1s ease-in-out,\n      background-color .25s ease-in-out,\n      color .25s ease-in-out;\n    border: ", ";\n    border-radius: 50%;\n    background-repeat: no-repeat;\n    background-position: center;\n    content: '';\n  }\n\n  & ~ ", " > svg {\n    position: absolute;\n  }\n\n  ", ";\n\n  &:focus ~ ", "::before {\n    outline: none;\n  }\n\n  & ~ ", ":active::before {\n    /* prettier-ignore */\n    transition:\n      border-color 0.1s ease-in-out,\n      background-color 0.1s ease-in-out,\n      color 0.1s ease-in-out;\n  }\n\n  ", ";\n\n  &:disabled ~ ", " {\n    cursor: default;\n  }\n\n  ", ";\n"])), StyledRadioLabel, function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return props.theme.borders.sm;
}, StyledRadioLabel, function (props) {
  return sizeStyles$a(props);
}, StyledRadioLabel, StyledRadioLabel, function (props) {
  return colorStyles$8(props);
}, StyledRadioLabel, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$n, props);
});
StyledRadioInput.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$n;
var COMPONENT_ID$m = 'forms.checkbox';
var colorStyles$7 = function colorStyles(props) {
  var SHADE = 600;
  var indeterminateBorderColor = getColor('primaryHue', SHADE, props.theme);
  var indeterminateBackgroundColor = indeterminateBorderColor;
  var indeterminateActiveBorderColor = getColor('primaryHue', SHADE + 100, props.theme);
  var indeterminateActiveBackgroundColor = indeterminateActiveBorderColor;
  var indeterminateDisabledBackgroundColor = getColor('neutralHue', SHADE - 400, props.theme);
  return css(["&:indeterminate ~ ", "::before{border-color:", ";background-color:", ";}&:enabled:indeterminate ~ ", ":active::before{border-color:", ";background-color:", ";}&:disabled:indeterminate ~ ", "::before{border-color:transparent;background-color:", ";}"], StyledCheckLabel, indeterminateBorderColor, indeterminateBackgroundColor, StyledCheckLabel, indeterminateActiveBorderColor, indeterminateActiveBackgroundColor, StyledCheckLabel, indeterminateDisabledBackgroundColor);
};
var StyledCheckInput = styled(StyledRadioInput).attrs({
  'data-garden-id': COMPONENT_ID$m,
  'data-garden-version': '8.35.0',
  type: 'checkbox'
})(_templateObject$n || (_templateObject$n = _taggedTemplateLiteral(["\n  /* stylelint-disable-next-line */\n  & ~ ", "::before {\n    border-radius: ", ";\n  }\n\n  ", ";\n\n  ", ";\n"])), StyledCheckLabel, function (props) {
  return props.theme.borderRadii.md;
}, function (props) {
  return colorStyles$7(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$m, props);
});
StyledCheckInput.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$m;
var COMPONENT_ID$l = 'forms.radio_message';
var StyledRadioMessage = styled(StyledMessage).attrs({
  'data-garden-id': COMPONENT_ID$l,
  'data-garden-version': '8.35.0'
})(_templateObject$m || (_templateObject$m = _taggedTemplateLiteral(["\n  /* stylelint-disable-next-line */\n  padding-", ":\n    ", ";\n\n  ", ";\n"])), function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return math("".concat(props.theme.space.base, " * 6px"));
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$l, props);
});
StyledRadioMessage.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$l;
var COMPONENT_ID$k = 'forms.checkbox_message';
var StyledCheckMessage = styled(StyledRadioMessage).attrs({
  'data-garden-id': COMPONENT_ID$k,
  'data-garden-version': '8.35.0'
})(_templateObject$l || (_templateObject$l = _taggedTemplateLiteral(["\n  ", ";\n"])), function (props) {
  return retrieveComponentStyles(COMPONENT_ID$k, props);
});
StyledCheckMessage.defaultProps = {
  theme: DEFAULT_THEME
};

function _extends$4() { _extends$4 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$4.apply(this, arguments); }

var _ref$4 = /*#__PURE__*/createElement("path", {
  fill: "none",
  stroke: "currentColor",
  strokeLinecap: "round",
  strokeLinejoin: "round",
  strokeWidth: 2,
  d: "M3 6l2 2 4-4"
});

function SvgCheckSmFill(props) {
  return /*#__PURE__*/createElement("svg", _extends$4({
    xmlns: "http://www.w3.org/2000/svg",
    width: 12,
    height: 12,
    viewBox: "0 0 12 12",
    focusable: "false",
    role: "presentation"
  }, props), _ref$4);
}

var _templateObject$k;
var COMPONENT_ID$j = 'forms.check_svg';
var StyledCheckSvg = styled(SvgCheckSmFill).attrs({
  'data-garden-id': COMPONENT_ID$j,
  'data-garden-version': '8.35.0'
})(_templateObject$k || (_templateObject$k = _taggedTemplateLiteral(["\n  transition: opacity 0.25 ease-in-out;\n  opacity: 0;\n  pointer-events: none;\n\n  ", ":checked ~ ", " > & {\n    opacity: 1;\n  }\n\n  ", ":indeterminate ~ ", " > & {\n    opacity: 0;\n  }\n\n  ", ";\n"])), StyledCheckInput, StyledCheckLabel, StyledCheckInput, StyledCheckLabel, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$j, props);
});
StyledCheckSvg.defaultProps = {
  theme: DEFAULT_THEME
};

function _extends$3() { _extends$3 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }

var _ref$3 = /*#__PURE__*/createElement("path", {
  stroke: "currentColor",
  strokeLinecap: "round",
  strokeWidth: 2,
  d: "M3 6h6"
});

function SvgDashFill(props) {
  return /*#__PURE__*/createElement("svg", _extends$3({
    xmlns: "http://www.w3.org/2000/svg",
    width: 12,
    height: 12,
    viewBox: "0 0 12 12",
    focusable: "false",
    role: "presentation"
  }, props), _ref$3);
}

var _templateObject$j;
var COMPONENT_ID$i = 'forms.dash_svg';
var StyledDashSvg = styled(SvgDashFill).attrs({
  'data-garden-id': COMPONENT_ID$i,
  'data-garden-version': '8.35.0'
})(_templateObject$j || (_templateObject$j = _taggedTemplateLiteral(["\n  transition: opacity 0.25 ease-in-out;\n  opacity: 0;\n  pointer-events: none;\n\n  ", ":indeterminate ~ ", " > & {\n    opacity: 1;\n  }\n\n  ", ";\n"])), StyledCheckInput, StyledCheckLabel, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$i, props);
});
StyledDashSvg.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$i;
var COMPONENT_ID$h = 'forms.file_upload';
var positionStyles = function positionStyles(props) {
  var topMargin = "".concat(props.theme.space.base * (props.isCompact ? 1 : 2), "px");
  return css(["", ":not([hidden]) + &,", " + &,", " + &,& + ", ",& + ", "{margin-top:", ";}"], StyledLabel, StyledHint, StyledMessage, StyledHint, StyledMessage, topMargin);
};
var colorStyles$6 = function colorStyles(props) {
  var baseColor = getColor('primaryHue', 600, props.theme);
  var hoverColor = getColor('primaryHue', 700, props.theme);
  var activeColor = getColor('primaryHue', 800, props.theme);
  var disabledBackgroundColor = getColor('neutralHue', 200, props.theme);
  var disabledForegroundColor = getColor('neutralHue', 400, props.theme);
  var boxShadow = "inset ".concat(props.theme.shadows.md(rgba(baseColor, 0.35)));
  return css(["border-color:", ";background-color:", ";color:", ";&:hover{border-color:", ";background-color:", ";color:", ";}&[data-garden-focus-visible]{box-shadow:", ";}&:active{border-color:", ";background-color:", ";color:", ";}&[aria-disabled='true']{border-color:", ";background-color:", ";color:", ";}"], props.isDragging ? activeColor : getColor('neutralHue', 600, props.theme), props.isDragging && rgba(baseColor, 0.2), props.isDragging ? activeColor : baseColor, hoverColor, rgba(baseColor, 0.08), hoverColor, boxShadow, activeColor, rgba(baseColor, 0.2), activeColor, disabledForegroundColor, disabledBackgroundColor, disabledForegroundColor);
};
var StyledFileUpload = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$h,
  'data-garden-version': '8.35.0'
})(_templateObject$i || (_templateObject$i = _taggedTemplateLiteral(["\n  box-sizing: content-box;\n  direction: ", ";\n  /* prettier-ignore */\n  transition:\n    border-color 0.25s ease-in-out,\n    box-shadow 0.1s ease-in-out,\n    background-color 0.25s ease-in-out,\n    color 0.25s ease-in-out;\n  border: dashed ", ";\n  border-radius: ", ";\n  cursor: pointer;\n  padding: ", ";\n  min-width: 4em;\n  text-align: center;\n  line-height: ", ";\n  font-size: ", ";\n  user-select: none;\n\n  &:focus {\n    outline: none;\n  }\n\n  &[aria-disabled='true'] {\n    cursor: default;\n  }\n\n  ", ";\n  ", ";\n\n  ", ";\n"])), function (props) {
  return props.theme.rtl ? 'rtl' : 'ltr';
}, function (props) {
  return props.theme.borderWidths.sm;
}, function (props) {
  return props.theme.borderRadii.md;
}, function (props) {
  return "".concat(props.theme.space.base * 5, "px ").concat(props.theme.space.base * 15, "px");
}, function (props) {
  return getLineHeight(props.theme.space.base * 5, props.theme.fontSizes.md);
}, function (props) {
  return props.theme.fontSizes.md;
}, function (props) {
  return colorStyles$6(props);
}, function (props) {
  return positionStyles(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$h, props);
});
StyledFileUpload.defaultProps = {
  theme: DEFAULT_THEME
};

function _extends$2() { _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }

var _ref$2 = /*#__PURE__*/createElement("circle", {
  cx: 6,
  cy: 6,
  r: 2,
  fill: "currentColor"
});

function SvgCircleSmFill$1(props) {
  return /*#__PURE__*/createElement("svg", _extends$2({
    xmlns: "http://www.w3.org/2000/svg",
    width: 12,
    height: 12,
    viewBox: "0 0 12 12",
    focusable: "false",
    role: "presentation"
  }, props), _ref$2);
}

var _templateObject$h;
var COMPONENT_ID$g = 'forms.radio_svg';
var StyledRadioSvg = styled(SvgCircleSmFill$1).attrs({
  'data-garden-id': COMPONENT_ID$g,
  'data-garden-version': '8.35.0'
})(_templateObject$h || (_templateObject$h = _taggedTemplateLiteral(["\n  transition: opacity 0.25 ease-in-out;\n  opacity: 0;\n\n  ", ":checked ~ ", " > & {\n    opacity: 1;\n  }\n\n  ", ";\n"])), StyledRadioInput, StyledRadioLabel, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$g, props);
});
StyledRadioSvg.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$g;
var COMPONENT_ID$f = 'forms.toggle_label';
var sizeStyles$9 = function sizeStyles(props) {
  var size = props.theme.space.base * 10;
  var padding = size + props.theme.space.base * 2;
  return css(["padding-", ":", "px;&[hidden]{padding-", ":", "px;}"], props.theme.rtl ? 'right' : 'left', padding, props.theme.rtl ? 'right' : 'left', size);
};
var StyledToggleLabel = styled(StyledCheckLabel).attrs({
  'data-garden-id': COMPONENT_ID$f,
  'data-garden-version': '8.35.0'
})(_templateObject$g || (_templateObject$g = _taggedTemplateLiteral(["\n  ", ";\n\n  ", ";\n"])), function (props) {
  return sizeStyles$9(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$f, props);
});
StyledToggleLabel.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$f;
var COMPONENT_ID$e = 'forms.toggle_hint';
var StyledToggleHint = styled(StyledHint).attrs({
  'data-garden-id': COMPONENT_ID$e,
  'data-garden-version': '8.35.0'
})(_templateObject$f || (_templateObject$f = _taggedTemplateLiteral(["\n  /* stylelint-disable-next-line */\n  padding-", ":\n    ", ";\n\n  ", ";\n"])), function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return math("".concat(props.theme.space.base, " * 12px"));
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$e, props);
});
StyledToggleHint.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$e;
var COMPONENT_ID$d = 'forms.toggle';
var colorStyles$5 = function colorStyles(props) {
  var SHADE = 600;
  var backgroundColor = getColor('neutralHue', SHADE - 100, props.theme);
  var hoverBackgroundColor = getColor('neutralHue', SHADE, props.theme);
  var activeBackgroundColor = getColor('neutralHue', SHADE + 100, props.theme);
  return css(["& ~ ", "::before{background-color:", ";}&:enabled ~ ", ":hover::before{background-color:", ";}&:enabled ~ ", ":active::before{background-color:", ";}"], StyledToggleLabel, backgroundColor, StyledToggleLabel, hoverBackgroundColor, StyledToggleLabel, activeBackgroundColor);
};
var sizeStyles$8 = function sizeStyles(props) {
  var height = "".concat(props.theme.space.base * 5, "px");
  var width = "".concat(props.theme.space.base * 10, "px");
  var iconSize = props.theme.iconSizes.md;
  var iconPosition = math("(".concat(height, " - ").concat(iconSize, ") / 2"));
  var checkedIconPosition = math("".concat(width, " - ").concat(iconSize, " - ").concat(iconPosition));
  return css(["& ~ ", "::before{width:", ";height:", ";}& ~ ", " > svg{top:", ";", ":", ";width:", ";height:", ";}&:checked ~ ", " > svg{", ":", ";}"], StyledToggleLabel, width, height, StyledToggleLabel, iconPosition, props.theme.rtl ? 'right' : 'left', iconPosition, iconSize, iconSize, StyledToggleLabel, props.theme.rtl ? 'right' : 'left', checkedIconPosition);
};
var StyledToggleInput = styled(StyledCheckInput).attrs({
  'data-garden-id': COMPONENT_ID$d,
  'data-garden-version': '8.35.0'
})(_templateObject$e || (_templateObject$e = _taggedTemplateLiteral(["\n  & ~ ", "::before {\n    top: 0;\n    /* prettier-ignore */\n    transition:\n      box-shadow .1s ease-in-out,\n      background-color .15s ease-in-out,\n      color .25s ease-in-out;\n    border: none;\n    border-radius: 100px;\n  }\n\n  ", ";\n\n  ", ";\n\n  ", ";\n"])), StyledToggleLabel, function (props) {
  return sizeStyles$8(props);
}, function (props) {
  return colorStyles$5(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$d, props);
});
StyledToggleInput.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$d;
var COMPONENT_ID$c = 'forms.toggle_message';
var StyledToggleMessage = styled(StyledMessage).attrs({
  'data-garden-id': COMPONENT_ID$c,
  'data-garden-version': '8.35.0'
})(_templateObject$d || (_templateObject$d = _taggedTemplateLiteral(["\n  /* stylelint-disable-next-line */\n  padding-", ":\n    ", ";\n\n  & ", " {\n    ", ": ", ";\n  }\n\n  ", ";\n"])), function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return math("".concat(props.theme.space.base, " * 12px"));
}, StyledMessageIcon, function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return math("".concat(props.theme.space.base, " * 10px - ").concat(props.theme.iconSizes.md));
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$c, props);
});
StyledToggleMessage.defaultProps = {
  theme: DEFAULT_THEME
};

function _extends$1() { _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }

var _ref$1 = /*#__PURE__*/createElement("circle", {
  cx: 8,
  cy: 8,
  r: 6,
  fill: "currentColor"
});

function SvgCircleSmFill(props) {
  return /*#__PURE__*/createElement("svg", _extends$1({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$1);
}

var _templateObject$c;
var COMPONENT_ID$b = 'forms.toggle_svg';
var StyledToggleSvg = styled(SvgCircleSmFill).attrs({
  'data-garden-id': COMPONENT_ID$b,
  'data-garden-version': '8.35.0'
})(_templateObject$c || (_templateObject$c = _taggedTemplateLiteral(["\n  transition: all 0.15s ease-in-out;\n\n  ", ";\n"])), function (props) {
  return retrieveComponentStyles(COMPONENT_ID$b, props);
});
StyledToggleSvg.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$b;
var COMPONENT_ID$a = 'forms.select';
var colorStyles$4 = function colorStyles(props) {
  var color = getColor('neutralHue', 700, props.theme);
  return css(["&:hover + ", ",&:focus + ", ",&[data-garden-focus-visible='true'] + ", "{color:", ";}"], StyledTextMediaFigure, StyledTextMediaFigure, StyledTextMediaFigure, color);
};
var sizeStyles$7 = function sizeStyles(props) {
  var padding = math("".concat(props.theme.iconSizes.md, " + ").concat(props.theme.space.base * 5));
  var iconVerticalPosition = "".concat(props.theme.space.base * (props.isCompact ? 1.5 : 2.5) + 1, "px");
  var iconHorizontalPosition = "".concat(props.theme.space.base * 3, "px");
  return css(["padding-", ":", ";& + ", "{top:", ";", ":", ";}"], props.theme.rtl ? 'left' : 'right', !props.isBare && padding, StyledTextMediaFigure, iconVerticalPosition, props.theme.rtl ? 'left' : 'right', iconHorizontalPosition);
};
var StyledSelect = styled(StyledTextInput).attrs({
  'data-garden-id': COMPONENT_ID$a,
  'data-garden-version': '8.35.0',
  as: 'select'
})(_templateObject$b || (_templateObject$b = _taggedTemplateLiteral(["\n  cursor: pointer;\n  text-overflow: ellipsis;\n\n  ", ";\n  ", ";\n\n  &::-ms-expand {\n    display: none; /* [1] */\n  }\n\n  &::-ms-value {\n    background-color: transparent; /* [1] */\n    color: inherit; /* [1] */\n  }\n\n  &:-moz-focusring {\n    transition: none;\n    text-shadow: 0 0 0 ", "; /* [1] */\n    color: transparent; /* [1] */\n  }\n\n  & + ", " {\n    position: absolute;\n    pointer-events: none;\n  }\n"])), function (props) {
  return sizeStyles$7(props);
}, function (props) {
  return colorStyles$4(props);
}, function (props) {
  return props.theme.colors.foreground;
}, StyledTextMediaFigure);
StyledSelect.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$a;
var COMPONENT_ID$9 = 'forms.select_wrapper';
var StyledSelectWrapper = styled(StyledTextFauxInput).attrs({
  'data-garden-id': COMPONENT_ID$9,
  'data-garden-version': '8.35.0',
  isBare: true
})(_templateObject$a || (_templateObject$a = _taggedTemplateLiteral(["\n  position: relative;\n  overflow: visible;\n"])));
StyledSelectWrapper.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$9;
var COMPONENT_ID$8 = 'forms.range';
var thumbStyles = function thumbStyles(styles) {
  var modifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return "\n    &".concat(modifier, "::-moz-range-thumb {\n      ").concat(styles, "\n    }\n\n    &").concat(modifier, "::-ms-thumb {\n      ").concat(styles, "\n    }\n\n    &").concat(modifier, "::-webkit-slider-thumb {\n      ").concat(styles, "\n    }\n  ");
};
var trackStyles = function trackStyles(styles) {
  var modifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return "\n    &".concat(modifier, "::-moz-range-track {\n      ").concat(styles, "\n    }\n\n    &").concat(modifier, "::-ms-track {\n      ").concat(styles, "\n    }\n\n    &").concat(modifier, "::-webkit-slider-runnable-track {\n      ").concat(styles, "\n    }\n  ");
};
var trackLowerStyles = function trackLowerStyles(styles) {
  var modifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return "\n    &".concat(modifier, "::-moz-range-progress {\n      ").concat(styles, "\n    }\n\n    &").concat(modifier, "::-ms-fill-lower {\n      ").concat(styles, "\n    }\n  ");
};
var colorStyles$3 = function colorStyles(props) {
  var SHADE = 600;
  var thumbBackgroundColor = getColor('primaryHue', SHADE, props.theme);
  var thumbBorderColor = thumbBackgroundColor;
  var thumbBoxShadow = props.theme.shadows.lg(math("".concat(props.theme.space.base, " * 1px")), math("".concat(props.theme.space.base, " * 2px")), getColor('neutralHue', SHADE + 200, props.theme, 0.24));
  var thumbActiveBackgroundColor = getColor('primaryHue', SHADE + 100, props.theme);
  var thumbActiveBorderColor = thumbBorderColor;
  var thumbDisabledBackgroundColor = getColor('neutralHue', SHADE - 300, props.theme);
  var thumbDisabledBorderColor = thumbDisabledBackgroundColor;
  var thumbFocusBoxShadow = props.theme.shadows.md(getColor('primaryHue', SHADE, props.theme, 0.35));
  var thumbHoverBackgroundColor = thumbActiveBackgroundColor;
  var thumbHoverBorderColor = thumbHoverBackgroundColor;
  var trackBackgroundColor = getColor('neutralHue', SHADE - 400, props.theme);
  var trackLowerBackgroundColor = thumbBackgroundColor;
  var trackBackgroundImage = "linear-gradient(".concat(trackLowerBackgroundColor, ", ").concat(trackLowerBackgroundColor, ")");
  var trackDisabledLowerBackgroundColor = thumbDisabledBackgroundColor;
  var trackDisabledBackgroundImage = "linear-gradient(".concat(trackDisabledLowerBackgroundColor, ", ").concat(trackDisabledLowerBackgroundColor, ")");
  return css(["", " ", " ", " ", " ", " ", " ", " ", " ", ""], trackStyles("\n      background-color: ".concat(trackBackgroundColor, ";\n      background-image: ").concat(trackBackgroundImage, "; /* provide means for styling lower range on WebKit */\n    ")), thumbStyles("\n      border-color: ".concat(thumbBorderColor, ";\n      box-shadow: ").concat(thumbBoxShadow, ";\n      background-color: ").concat(thumbBackgroundColor, ";\n    ")), trackLowerStyles("\n      background-color: ".concat(trackLowerBackgroundColor, ";\n    ")), thumbStyles("\n        transition:\n          border-color .25s ease-in-out,\n          background-color .25s ease-in-out;\n        border-color: ".concat(thumbHoverBorderColor, ";\n        background-color: ").concat(thumbHoverBackgroundColor, ";\n      "), ':hover'), thumbStyles("\n        box-shadow: ".concat(thumbFocusBoxShadow, ";\n      "), '[data-garden-focus-visible="true"]'), thumbStyles("\n        border-color: ".concat(thumbActiveBorderColor, ";\n        background-color: ").concat(thumbActiveBackgroundColor, "\n      "), ':active'), trackStyles("\n        background-image: ".concat(trackDisabledBackgroundImage, ";\n      "), ':disabled'), thumbStyles("\n        border-color: ".concat(thumbDisabledBorderColor, ";\n        box-shadow: none;\n        background-color: ").concat(thumbDisabledBackgroundColor, ";\n      "), ':disabled'), trackLowerStyles("\n        background-color: ".concat(trackDisabledLowerBackgroundColor, "\n      "), ':disabled'));
};
var sizeStyles$6 = function sizeStyles(props) {
  var thumbSize = math("".concat(props.theme.space.base, " * 5px"));
  var trackHeight = math("".concat(props.theme.space.base, " * 1.5px"));
  var trackBorderRadius = trackHeight;
  var trackMargin = math("(".concat(thumbSize, " - ").concat(trackHeight, ") / 2 + ").concat(props.theme.shadowWidths.md));
  var thumbMargin = math("(".concat(trackHeight, " - ").concat(thumbSize, ") / 2"));
  return css(["", ":not([hidden]) + &,", " + &,", " + &,& + ", ",& + ", "{margin-top:", ";}", ";", " ", ""], StyledLabel, StyledHint, StyledMessage, StyledHint, StyledMessage, math("".concat(props.theme.space.base, " * 2px")), trackStyles("\n      margin: ".concat(trackMargin, " 0;\n      border-radius: ").concat(trackBorderRadius, ";\n      height: ").concat(trackHeight, ";\n    ")), thumbStyles("\n      margin: ".concat(thumbMargin, " 0; /* reset for IE */\n      width: ").concat(thumbSize, ";\n      height: ").concat(thumbSize, ";\n    ")), trackLowerStyles("\n      border-top-".concat(props.theme.rtl ? 'right' : 'left', "-radius: ").concat(trackBorderRadius, ";\n      border-bottom-").concat(props.theme.rtl ? 'right' : 'left', "-radius: ").concat(trackBorderRadius, ";\n      height: ").concat(trackHeight, ";\n    ")));
};
var StyledRangeInput = styled.input.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$8,
    'data-garden-version': '8.35.0',
    type: 'range',
    style: {
      backgroundSize: props.backgroundSize
    }
  };
})(_templateObject$9 || (_templateObject$9 = _taggedTemplateLiteral(["\n  appearance: none;\n  direction: ", ";\n  margin: 0; /* reset for WebKit & Firefox */\n  background-color: inherit; /* reset for Firefox (disabled) */\n  cursor: pointer;\n  padding: 0; /* reset for IE */\n  width: 100%;\n  vertical-align: middle;\n\n  ", "\n\n  &::-webkit-slider-container,\n  &::-webkit-slider-runnable-track {\n    background-size: inherit; /* provide means for styling WebKit lower range */\n  }\n\n  ", ";\n\n  ", "\n\n  ", ";\n\n  &::-moz-focus-outer {\n    border: 0; /* remove dotted outline from Firefox on focus */\n  }\n\n  &::-ms-tooltip {\n    display: none; /* reset for IE */\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    cursor: default;\n  }\n\n  ", ";\n"])), function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return trackStyles("\n      appearance: none;\n      border-color: transparent; /* reset for IE */\n      background-repeat: repeat-y;\n      background-size: 0;\n      background-position: ".concat(props.theme.rtl ? '100% 100%' : '0% 0%', ";\n      width: 99.8%; /* fix for IE which cuts off the upper track's border radius */\n      color: transparent; /* reset for IE */\n      box-sizing: border-box; /* reset for IE */\n    "));
}, function (props) {
  return sizeStyles$6(props);
}, function (props) {
  return thumbStyles("\n      appearance: none;\n      transition: box-shadow .1s ease-in-out;\n      border: ".concat(props.theme.borders.md, ";\n      border-radius: 100%;\n      box-sizing: border-box;\n    "));
}, function (props) {
  return colorStyles$3(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$8, props);
});
StyledRangeInput.defaultProps = {
  backgroundSize: '0%',
  theme: DEFAULT_THEME
};

var _templateObject$8;
var COMPONENT_ID$7 = 'forms.slider';
var StyledSlider = styled.div.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$7,
    'data-garden-version': '8.35.0',
    'aria-disabled': props.isDisabled
  };
})(_templateObject$8 || (_templateObject$8 = _taggedTemplateLiteral(["\n  display: block;\n  position: relative;\n  z-index: 0;\n  cursor: pointer;\n  /* thumb height + focused shadow widths */\n  height: ", ";\n\n  &[aria-disabled='true'] {\n    cursor: default;\n  }\n\n  /* stylelint-disable */\n  ", ":not([hidden]) + &,\n  ", " + &,\n  ", " + &,\n  & + ", ",\n  & + ", " {\n    margin-top: ", ";\n  }\n  /* stylelint-enable */\n\n  ", ";\n"])), function (props) {
  return math("(".concat(props.theme.space.base, " * 5px) + (").concat(props.theme.shadowWidths.md, " * 2)"));
}, StyledLabel, StyledHint, StyledMessage, StyledHint, StyledMessage, function (props) {
  return math("".concat(props.theme.space.base, " * 2px"));
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$7, props);
});
StyledSlider.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$7;
var COMPONENT_ID$6 = 'forms.slider_thumb';
var colorStyles$2 = function colorStyles(props) {
  var SHADE = 600;
  var backgroundColor = getColor('primaryHue', SHADE, props.theme);
  var borderColor = backgroundColor;
  var boxShadow = props.theme.shadows.lg(math("".concat(props.theme.space.base, " * 1px")), math("".concat(props.theme.space.base, " * 2px")), getColor('neutralHue', SHADE + 200, props.theme, 0.24));
  var activeBackgroundColor = getColor('primaryHue', SHADE + 100, props.theme);
  var activeBorderColor = borderColor;
  var hoverBackgroundColor = activeBackgroundColor;
  var hoverBorderColor = hoverBackgroundColor;
  var focusBoxShadow = props.theme.shadows.md(getColor('primaryHue', SHADE, props.theme, 0.35));
  var disabledBackgroundColor = getColor('neutralHue', SHADE - 300, props.theme);
  var disabledBorderColor = disabledBackgroundColor;
  return css(["border-color:", ";box-shadow:", ";background-color:", ";&[data-garden-focus-visible='true']{box-shadow:", ";}&:hover,&[data-garden-hover='true']{border-color:", ";background-color:", ";}&:active,&[data-garden-active='true']{border-color:", ";background-color:", ";}&[aria-disabled='true']{border-color:", ";box-shadow:none;background-color:", ";}"], borderColor, boxShadow, backgroundColor, focusBoxShadow, hoverBorderColor, hoverBackgroundColor, activeBorderColor, activeBackgroundColor, disabledBorderColor, disabledBackgroundColor);
};
var sizeStyles$5 = function sizeStyles(props) {
  var size = math("".concat(props.theme.space.base, " * 5px"));
  var marginTop = math("".concat(size, " / -2"));
  return css(["margin-top:", ";width:", ";height:", ";"], marginTop, size, size);
};
var StyledSliderThumb = styled.div.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$6,
    'data-garden-version': '8.35.0',
    'aria-disabled': props.isDisabled
  };
})(_templateObject$7 || (_templateObject$7 = _taggedTemplateLiteral(["\n  appearance: none;\n  position: absolute;\n  top: 50%;\n  ", ": ", ";\n  /* prettier-ignore */\n  transition:\n    border-color 0.25s ease-in-out,\n    box-shadow 0.1s ease-in-out,\n    background-color 0.25s ease-in-out;\n  z-index: 1;\n  border: ", ";\n  border-radius: 100%;\n  cursor: inherit;\n  box-sizing: border-box;\n  font-size: 0;\n\n  ", ";\n\n  &:focus {\n    outline: none;\n  }\n\n  ", ";\n\n  ", ";\n"])), function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return math("".concat(props.position, " * 1px"));
}, function (props) {
  return props.theme.borders.md;
}, function (props) {
  return sizeStyles$5(props);
}, function (props) {
  return colorStyles$2(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$6, props);
});
StyledSliderThumb.defaultProps = {
  position: 0,
  theme: DEFAULT_THEME
};

var _templateObject$6;
var COMPONENT_ID$5 = 'forms.slider_track';
var colorStyles$1 = function colorStyles(props) {
  var SHADE = 600;
  var backgroundColor = getColor('neutralHue', SHADE - 400, props.theme);
  var backgroundImageColor = getColor('primaryHue', SHADE, props.theme);
  var disabledBackgroundColor = getColor('neutralHue', SHADE - 300, props.theme);
  return css(["background-color:", ";background-image:linear-gradient(", ",", ");&[aria-disabled='true']{background-image:linear-gradient(", ",", ");}"], backgroundColor, backgroundImageColor, backgroundImageColor, disabledBackgroundColor, disabledBackgroundColor);
};
var sizeStyles$4 = function sizeStyles(props) {
  var height = math("".concat(props.theme.space.base, " * 1.5px"));
  var backgroundPosition = math("".concat(props.backgroundPosition, " * 1px"));
  var backgroundSize = math("".concat(props.backgroundSize, " * 1px"));
  var borderRadius = height;
  var marginTop = math("".concat(height, " / -2"));
  var padding = math("".concat(props.theme.space.base, " * 2.5px"));
  return css(["margin-top:", ";border-radius:", ";background-position:", ";background-size:", ";padding:0 ", ";"], marginTop, borderRadius, backgroundPosition, backgroundSize, padding);
};
var StyledSliderTrack = styled.div.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$5,
    'data-garden-version': '8.35.0',
    'aria-disabled': props.isDisabled
  };
})(_templateObject$6 || (_templateObject$6 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 50%;\n  box-sizing: border-box;\n  background-origin: content-box;\n  background-repeat: repeat-y;\n  width: 100%;\n\n  ", ";\n\n  ", ";\n\n  ", ";\n"])), function (props) {
  return sizeStyles$4(props);
}, function (props) {
  return colorStyles$1(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$5, props);
});
StyledSliderTrack.defaultProps = {
  backgroundSize: 0,
  backgroundPosition: 0,
  theme: DEFAULT_THEME
};

var _templateObject$5;
var COMPONENT_ID$4 = 'forms.slider_track_rail';
var sizeStyles$3 = function sizeStyles(props) {
  var height = math("".concat(props.theme.space.base, " * 1.5px"));
  var margin = math("".concat(props.theme.space.base, " * 2.5px"));
  return css(["margin:0 ", " 0 ", ";height:", ";"], props.theme.rtl ? "-".concat(margin) : margin, props.theme.rtl ? margin : "-".concat(margin), height);
};
var StyledSliderTrackRail = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$4,
  'data-garden-version': '8.35.0'
})(_templateObject$5 || (_templateObject$5 = _taggedTemplateLiteral(["\n  position: relative;\n\n  ", ";\n\n  ", ";\n"])), function (props) {
  return sizeStyles$3(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$4, props);
});
StyledSliderTrackRail.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$4;
var COMPONENT_ID$3 = 'forms.tile_icon';
var sizeStyles$2 = function sizeStyles(props) {
  var iconSize = math("".concat(props.theme.iconSizes.md, " * 2"));
  var position;
  var top;
  var horizontalValue;
  if (!props.isCentered) {
    position = 'absolute';
    top = "".concat(props.theme.space.base * 6, "px");
    horizontalValue = "left: ".concat(props.theme.space.base * 5, "px");
    if (props.theme.rtl) {
      horizontalValue = "right: ".concat(props.theme.space.base * 5, "px");
    }
  }
  return css(["position:", ";top:", ";", ";& > *{width:", ";height:", ";}"], position, top, horizontalValue, iconSize, iconSize);
};
var StyledTileIcon = styled.span.attrs({
  'data-garden-id': COMPONENT_ID$3,
  'data-garden-version': '8.35.0'
})(_templateObject$4 || (_templateObject$4 = _taggedTemplateLiteral(["\n  display: block;\n  transition: color 0.25s ease-in-out;\n  text-align: center;\n  line-height: 0;\n\n  ", ";\n\n  ", ";\n"])), function (props) {
  return sizeStyles$2(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$3, props);
});
StyledTileIcon.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$3;
var COMPONENT_ID$2 = 'forms.tile';
var colorStyles = function colorStyles(props) {
  var SHADE = 600;
  var iconColor = getColor('neutralHue', SHADE, props.theme);
  var color = getColor('neutralHue', SHADE + 200, props.theme);
  var borderColor = getColor('neutralHue', SHADE - 300, props.theme);
  var hoverBackgroundColor = getColor('primaryHue', SHADE, props.theme, 0.08);
  var hoverBorderColor = getColor('primaryHue', SHADE, props.theme);
  var focusBorderColor = hoverBorderColor;
  var focusBoxShadow = props.theme.shadows.md(rgba(focusBorderColor, 0.35));
  var activeBackgroundColor = getColor('primaryHue', SHADE, props.theme, 0.2);
  var activeBorderColor = focusBorderColor;
  var disabledBackgroundColor = getColor('neutralHue', SHADE - 500, props.theme);
  var disabledBorderColor = getColor('neutralHue', SHADE - 400, props.theme);
  var disabledColor = getColor('neutralHue', SHADE - 200, props.theme);
  var selectedBorderColor = focusBorderColor;
  var selectedBackgroundColor = selectedBorderColor;
  var selectedHoverBorderColor = getColor('primaryHue', SHADE + 100, props.theme);
  var selectedHoverBackgroundColor = selectedHoverBorderColor;
  var selectedActiveBorderColor = getColor('primaryHue', SHADE + 200, props.theme);
  var selectedActiveBackgroundColor = selectedActiveBorderColor;
  var selectedDisabledBackgroundColor = disabledBorderColor;
  return css(["border:", " ", ";border-color:", ";background-color:", ";color:", ";", "{color:", ";}&:focus{outline:none;}&:hover:not([aria-disabled='true']){border-color:", ";background-color:", ";", "{color:", ";}}&[data-garden-focus-visible='true']{border-color:", ";box-shadow:", ";}&:active:not([aria-disabled='true']){border-color:", ";background-color:", ";", "{color:", ";}}&[data-garden-selected='true']{border-color:", ";background-color:", ";color:", ";", "{color:", ";}}&[data-garden-selected='true']:not([aria-disabled='true']):hover{border-color:", ";background-color:", ";color:", ";", "{color:", ";}}&[data-garden-selected='true']:not([aria-disabled='true']):active{border-color:", ";background-color:", ";color:", ";", "{color:", ";}}&[aria-disabled='true']{border-color:", ";background-color:", ";color:", ";", "{color:", ";}}&[data-garden-selected='true'][aria-disabled='true']{background-color:", ";color:", ";", "{color:", ";}}"], props.theme.borders.sm, getColor('neutralHue', SHADE - 300, props.theme), borderColor, props.theme.colors.background, color, StyledTileIcon, iconColor, hoverBorderColor, hoverBackgroundColor, StyledTileIcon, color, focusBorderColor, focusBoxShadow, activeBorderColor, activeBackgroundColor, StyledTileIcon, color, selectedBorderColor, selectedBackgroundColor, props.theme.colors.background, StyledTileIcon, props.theme.colors.background, selectedHoverBorderColor, selectedHoverBackgroundColor, props.theme.colors.background, StyledTileIcon, props.theme.colors.background, selectedActiveBorderColor, selectedActiveBackgroundColor, props.theme.colors.background, StyledTileIcon, props.theme.colors.background, disabledBorderColor, disabledBackgroundColor, disabledColor, StyledTileIcon, disabledColor, selectedDisabledBackgroundColor, disabledColor, StyledTileIcon, disabledColor);
};
var StyledTile = styled.label.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$2,
    'data-garden-version': '8.35.0',
    'data-garden-focus-visible': props.isFocused,
    'data-garden-selected': props.isSelected
  };
})(_templateObject$3 || (_templateObject$3 = _taggedTemplateLiteral(["\n  display: block;\n  position: relative;\n  /* prettier-ignore */\n  transition:\n    border-color .25s ease-in-out,\n    box-shadow .1s ease-in-out,\n    background-color .25s ease-in-out,\n    color .25s ease-in-out;\n  border-radius: ", ";\n  cursor: ", ";\n  padding: ", "px;\n  direction: ", ";\n\n  ", ";\n\n  ", ";\n"])), function (props) {
  return props.theme.borderRadii.md;
}, function (props) {
  return !props.isDisabled && 'pointer';
}, function (props) {
  return props.theme.space.base * 5;
}, function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return colorStyles(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$2, props);
});
StyledTile.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$2;
var COMPONENT_ID$1 = 'forms.tile_description';
var sizeStyles$1 = function sizeStyles(props) {
  var marginDirection = 'left';
  var marginValue;
  if (props.theme.rtl) {
    marginDirection = 'right';
  }
  if (!props.isCentered) {
    marginValue = math("(".concat(props.theme.iconSizes.md, " * 2) + ").concat(props.theme.space.base * 5, "px"));
  }
  return css(["margin-top:", "px;margin-", ":", ";"], props.theme.space.base, marginDirection, marginValue);
};
var StyledTileDescription = styled.span.attrs({
  'data-garden-id': COMPONENT_ID$1,
  'data-garden-version': '8.35.0'
})(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteral(["\n  display: block;\n  text-align: ", ";\n  line-height: ", ";\n  font-size: ", ";\n\n  ", ";\n\n  ", ";\n"])), function (props) {
  return props.isCentered && 'center';
}, function (props) {
  return getLineHeight(props.theme.space.base * 4, props.theme.fontSizes.sm);
}, function (props) {
  return props.theme.fontSizes.sm;
}, function (props) {
  return sizeStyles$1(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$1, props);
});
StyledTileDescription.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject$1;
var StyledTileInput = styled.input(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["\n  position: absolute;\n  border: 0;\n  clip: rect(1px, 1px, 1px, 1px);\n  padding: 0;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  white-space: nowrap;\n"])));
StyledTileInput.defaultProps = {
  theme: DEFAULT_THEME
};

var _templateObject;
var COMPONENT_ID = 'forms.tile_label';
var sizeStyles = function sizeStyles(props) {
  var marginDirection = 'left';
  var marginTop = "".concat(props.theme.space.base * 2, "px");
  var marginValue;
  if (props.theme.rtl) {
    marginDirection = 'right';
  }
  if (!props.isCentered) {
    marginValue = math("(".concat(props.theme.iconSizes.md, " * 2) + ").concat(props.theme.space.base * 5, "px"));
    marginTop = '0';
  }
  return css(["margin-top:", ";margin-", ":", ";"], marginTop, marginDirection, marginValue);
};
var StyledTileLabel = styled.span.attrs({
  'data-garden-id': COMPONENT_ID,
  'data-garden-version': '8.35.0'
})(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: block;\n  text-align: ", ";\n  line-height: ", ";\n  font-size: ", ";\n  font-weight: ", ";\n\n  ", ";\n\n  ", ";\n"])), function (props) {
  return props.isCentered && 'center';
}, function (props) {
  return getLineHeight(props.theme.space.base * 5, props.theme.fontSizes.md);
}, function (props) {
  return props.theme.fontSizes.md;
}, function (props) {
  return props.theme.fontWeights.semibold;
}, function (props) {
  return sizeStyles(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID, props);
});
StyledTileLabel.defaultProps = {
  theme: DEFAULT_THEME
};

var Field = React.forwardRef(function (props, ref) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isLabelActive = _useState2[0],
      setIsLabelActive = _useState2[1];
  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isLabelHovered = _useState4[0],
      setIsLabelHovered = _useState4[1];
  var multiThumbRangeRef = useRef(null);
  var getMessageProps = function getMessageProps(messageProps) {
    return _objectSpread2({
      role: 'alert'
    }, messageProps);
  };
  var propGetters = useField(props.id);
  var fieldProps = useMemo(function () {
    return _objectSpread2(_objectSpread2({}, propGetters), {}, {
      getMessageProps: getMessageProps,
      isLabelActive: isLabelActive,
      setIsLabelActive: setIsLabelActive,
      isLabelHovered: isLabelHovered,
      setIsLabelHovered: setIsLabelHovered,
      multiThumbRangeRef: multiThumbRangeRef
    });
  }, [propGetters, isLabelActive, isLabelHovered]);
  return React.createElement(FieldContext.Provider, {
    value: fieldProps
  }, React.createElement(StyledField, _extends$8({}, props, {
    ref: ref
  })));
});
Field.propTypes = {
  id: PropTypes.string
};

var InputContext = createContext(undefined);
var useInputContext = function useInputContext() {
  return useContext(InputContext);
};

var Hint = React.forwardRef(function (props, ref) {
  var fieldContext = useFieldContext();
  var type = useInputContext();
  var HintComponent;
  if (type === 'checkbox') {
    HintComponent = StyledCheckHint;
  } else if (type === 'radio') {
    HintComponent = StyledRadioHint;
  } else if (type === 'toggle') {
    HintComponent = StyledToggleHint;
  } else {
    HintComponent = StyledHint;
  }
  var combinedProps = props;
  if (fieldContext) {
    combinedProps = fieldContext.getHintProps(combinedProps);
  }
  return React.createElement(HintComponent, _extends$8({
    ref: ref
  }, combinedProps));
});
Hint.displayName = 'Hint';

var Label$1 = React.forwardRef(function (props, ref) {
  var fieldContext = useFieldContext();
  var type = useInputContext();
  var combinedProps = props;
  if (fieldContext) {
    combinedProps = fieldContext.getLabelProps(combinedProps);
    if (type === undefined) {
      var setIsLabelActive = fieldContext.setIsLabelActive,
          setIsLabelHovered = fieldContext.setIsLabelHovered,
          multiThumbRangeRef = fieldContext.multiThumbRangeRef;
      combinedProps = _objectSpread2(_objectSpread2({}, combinedProps), {}, {
        onMouseUp: composeEventHandlers(props.onMouseUp, function () {
          setIsLabelActive(false);
        }),
        onMouseDown: composeEventHandlers(props.onMouseDown, function () {
          setIsLabelActive(true);
        }),
        onMouseEnter: composeEventHandlers(props.onMouseEnter, function () {
          setIsLabelHovered(true);
        }),
        onMouseLeave: composeEventHandlers(props.onMouseLeave, function () {
          setIsLabelHovered(false);
        }),
        onClick: composeEventHandlers(props.onClick, function () {
          multiThumbRangeRef.current && multiThumbRangeRef.current.focus();
        })
      });
    }
  }
  if (type === 'radio') {
    return React.createElement(StyledRadioLabel, _extends$8({
      ref: ref
    }, combinedProps), React.createElement(StyledRadioSvg, null), props.children);
  } else if (type === 'checkbox') {
    var onLabelSelect = function onLabelSelect(e) {
      var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
      if (fieldContext && isFirefox && e.target instanceof Element) {
        var inputId = e.target.getAttribute('for');
        if (!inputId) return;
        var input = document.getElementById(inputId);
        if (input && input.type === 'checkbox') {
          if (e.shiftKey) {
            input.click();
            input.checked = true;
          }
          input.focus();
        }
      }
    };
    combinedProps = _objectSpread2(_objectSpread2({}, combinedProps), {}, {
      onClick: composeEventHandlers(combinedProps.onClick, onLabelSelect)
    });
    return React.createElement(StyledCheckLabel, _extends$8({
      ref: ref
    }, combinedProps), React.createElement(StyledCheckSvg, null), React.createElement(StyledDashSvg, null), props.children);
  } else if (type === 'toggle') {
    return React.createElement(StyledToggleLabel, _extends$8({
      ref: ref
    }, combinedProps), React.createElement(StyledToggleSvg, null), props.children);
  }
  return React.createElement(StyledLabel, _extends$8({
    ref: ref
  }, combinedProps));
});
Label$1.displayName = 'Label';
Label$1.propTypes = {
  isRegular: PropTypes.bool
};

var Message = React.forwardRef(function (_ref, ref) {
  var validation = _ref.validation,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["validation", "children"]);
  var fieldContext = useFieldContext();
  var type = useInputContext();
  var MessageComponent;
  if (type === 'checkbox') {
    MessageComponent = StyledCheckMessage;
  } else if (type === 'radio') {
    MessageComponent = StyledRadioMessage;
  } else if (type === 'toggle') {
    MessageComponent = StyledToggleMessage;
  } else {
    MessageComponent = StyledMessage;
  }
  var combinedProps = _objectSpread2({
    validation: validation
  }, props);
  if (fieldContext) {
    combinedProps = fieldContext.getMessageProps(combinedProps);
  }
  return React.createElement(MessageComponent, _extends$8({
    ref: ref
  }, combinedProps), validation && React.createElement(StyledMessageIcon, {
    validation: validation
  }), children);
});
Message.displayName = 'Message';
Message.propTypes = {
  validation: PropTypes.oneOf(['success', 'warning', 'error'])
};

var Checkbox = React.forwardRef(function (_ref, ref) {
  var indeterminate = _ref.indeterminate,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["indeterminate", "children"]);
  var fieldContext = useFieldContext();
  var inputRef = function inputRef(inputElement) {
    inputElement && (inputElement.indeterminate = indeterminate);
  };
  var combinedRef = function combinedRef(inputElement) {
    [inputRef, ref].forEach(function (targetRef) {
      if (targetRef) {
        if (typeof targetRef === 'function') {
          targetRef(inputElement);
        } else {
          targetRef.current = inputElement;
        }
      }
    });
  };
  var combinedProps = _objectSpread2({
    ref: combinedRef
  }, props);
  if (fieldContext) {
    combinedProps = fieldContext.getInputProps(combinedProps);
  }
  return React.createElement(InputContext.Provider, {
    value: "checkbox"
  }, React.createElement(StyledCheckInput, combinedProps), children);
});
Checkbox.displayName = 'Checkbox';

var InputGroupContext = createContext(undefined);
var useInputGroupContext = function useInputGroupContext() {
  return useContext(InputGroupContext);
};

var Input = React.forwardRef(function (_ref, ref) {
  var onSelect = _ref.onSelect,
      props = _objectWithoutProperties(_ref, ["onSelect"]);
  var fieldContext = useFieldContext();
  var inputGroupContext = useInputGroupContext();
  var onSelectHandler = props.readOnly ? composeEventHandlers(onSelect, function (event) {
    event.currentTarget.select();
  }) : onSelect;
  var combinedProps = _objectSpread2({
    ref: ref,
    onSelect: onSelectHandler
  }, props);
  if (inputGroupContext) {
    combinedProps = _objectSpread2(_objectSpread2({}, combinedProps), {}, {
      isCompact: inputGroupContext.isCompact || combinedProps.isCompact,
      focusInset: props.focusInset === undefined ? true : props.focusInset
    });
  }
  if (fieldContext) {
    combinedProps = fieldContext.getInputProps(combinedProps, {
      isDescribed: true
    });
  }
  return React.createElement(StyledTextInput, combinedProps);
});
Input.propTypes = {
  isCompact: PropTypes.bool,
  isBare: PropTypes.bool,
  focusInset: PropTypes.bool,
  validation: PropTypes.oneOf(['success', 'warning', 'error'])
};

var Radio = React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);
  var fieldContext = useFieldContext();
  var combinedProps = _objectSpread2({
    ref: ref
  }, props);
  if (fieldContext) {
    combinedProps = fieldContext.getInputProps(combinedProps);
  }
  return React.createElement(InputContext.Provider, {
    value: "radio"
  }, React.createElement(StyledRadioInput, combinedProps), children);
});
Radio.displayName = 'Radio';

var Range = React.forwardRef(function (_ref, ref) {
  var min = _ref.min,
      max = _ref.max,
      step = _ref.step,
      props = _objectWithoutProperties(_ref, ["min", "max", "step"]);
  var _useState = useState('0'),
      _useState2 = _slicedToArray(_useState, 2),
      backgroundSize = _useState2[0],
      setBackgroundSize = _useState2[1];
  var rangeRef = useCombinedRefs(ref);
  var fieldContext = useFieldContext();
  var updateBackgroundWidthFromInput = useCallback(function (rangeTarget) {
    var relativeMax = max;
    var value = rangeTarget.value;
    if (parseFloat(relativeMax) < parseFloat(min)) {
      relativeMax = 100;
    }
    var percentage = 100 * (value - min) / (relativeMax - min);
    setBackgroundSize("".concat(percentage, "%"));
  },
  [max, min, step]);
  useEffect(function () {
    updateBackgroundWidthFromInput(rangeRef.current);
  }, [rangeRef, updateBackgroundWidthFromInput, props.value]);
  var combinedProps = _objectSpread2(_objectSpread2({
    ref: rangeRef,
    min: min,
    max: max,
    step: step,
    backgroundSize: backgroundSize
  }, props), {}, {
    onChange: composeEventHandlers(props.onChange, function (event) {
      updateBackgroundWidthFromInput(event.target);
    })
  });
  if (fieldContext) {
    combinedProps = fieldContext.getInputProps(combinedProps, {
      isDescribed: true
    });
  }
  return React.createElement(StyledRangeInput, combinedProps);
});
Range.defaultProps = {
  min: 0,
  max: 100,
  step: 1
};

var parseStyleValue = function parseStyleValue(value) {
  return parseInt(value, 10) || 0;
};
var Textarea = React.forwardRef(function (_ref, ref) {
  var minRows = _ref.minRows,
      maxRows = _ref.maxRows,
      style = _ref.style,
      onChange = _ref.onChange,
      onSelect = _ref.onSelect,
      props = _objectWithoutProperties(_ref, ["minRows", "maxRows", "style", "onChange", "onSelect"]);
  var fieldContext = useFieldContext();
  var textAreaRef = useCombinedRefs(ref);
  var shadowTextAreaRef = useRef(null);
  var _useState = useState({
    overflow: false,
    height: 0
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];
  var isControlled = props.value !== null && props.value !== undefined;
  var isAutoResizable = (minRows !== undefined || maxRows !== undefined) && !props.isResizable;
  var calculateHeight = useCallback(function () {
    if (!isAutoResizable) {
      return;
    }
    var textarea = textAreaRef.current;
    var computedStyle = window.getComputedStyle(textarea);
    var shadowTextArea = shadowTextAreaRef.current;
    shadowTextArea.style.width = computedStyle.width;
    shadowTextArea.value = textarea.value || textarea.placeholder || ' ';
    var boxSizing = computedStyle.boxSizing;
    var padding = parseStyleValue(computedStyle.paddingBottom) + parseStyleValue(computedStyle.paddingTop);
    var border = parseStyleValue(computedStyle.borderTopWidth) + parseStyleValue(computedStyle.borderBottomWidth);
    var innerHeight = shadowTextArea.scrollHeight - padding;
    shadowTextArea.value = 'x';
    var singleRowHeight = shadowTextArea.scrollHeight - padding;
    var outerHeight = innerHeight;
    if (minRows) {
      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
    }
    if (maxRows) {
      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
    }
    outerHeight = Math.max(outerHeight, singleRowHeight);
    var updatedHeight = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
    var overflow = Math.abs(outerHeight - innerHeight) <= 1;
    setState(function (prevState) {
      if (updatedHeight > 0 && Math.abs((prevState.height || 0) - updatedHeight) > 1 || prevState.overflow !== overflow) {
        return {
          overflow: overflow,
          height: updatedHeight
        };
      }
      return prevState;
    });
  }, [maxRows, minRows, textAreaRef, isAutoResizable]);
  var onChangeHandler = useCallback(function (e) {
    if (!isControlled) {
      calculateHeight();
    }
    if (onChange) {
      onChange(e);
    }
  }, [calculateHeight, isControlled, onChange]);
  useEffect(function () {
    if (!isAutoResizable) {
      return undefined;
    }
    var resizeHandler = debounce(function () {
      calculateHeight();
    });
    window.addEventListener('resize', resizeHandler);
    return function () {
      resizeHandler.cancel();
      window.removeEventListener('resize', resizeHandler);
    };
  }, [calculateHeight, isAutoResizable]);
  useLayoutEffect(function () {
    calculateHeight();
  });
  var computedStyle = {};
  if (isAutoResizable) {
    computedStyle.height = state.height;
    computedStyle.overflow = state.overflow ? 'hidden' : undefined;
  }
  var onSelectHandler = props.readOnly ? composeEventHandlers(onSelect, function (event) {
    event.currentTarget.select();
  }) : onSelect;
  var combinedProps = _objectSpread2({
    ref: textAreaRef,
    rows: minRows,
    onChange: onChangeHandler,
    onSelect: onSelectHandler,
    style: _objectSpread2(_objectSpread2({}, computedStyle), style)
  }, props);
  if (fieldContext) {
    combinedProps = fieldContext.getInputProps(combinedProps, {
      isDescribed: true
    });
  }
  return React.createElement(React.Fragment, null, React.createElement(StyledTextarea, combinedProps), isAutoResizable && React.createElement(StyledTextarea, {
    "aria-hidden": true,
    readOnly: true,
    isHidden: true,
    className: props.className,
    ref: shadowTextAreaRef,
    tabIndex: -1,
    isBare: props.isBare,
    isCompact: props.isCompact,
    style: style
  }));
});
Textarea.propTypes = {
  isCompact: PropTypes.bool,
  isBare: PropTypes.bool,
  focusInset: PropTypes.bool,
  isResizable: PropTypes.bool,
  minRows: PropTypes.number,
  maxRows: PropTypes.number,
  validation: PropTypes.oneOf(['success', 'warning', 'error'])
};

var Toggle = React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);
  var fieldContext = useFieldContext();
  var combinedProps = _objectSpread2({
    ref: ref
  }, props);
  if (fieldContext) {
    combinedProps = fieldContext.getInputProps(combinedProps);
  }
  return React.createElement(InputContext.Provider, {
    value: "toggle"
  }, React.createElement(StyledToggleInput, combinedProps), children);
});
Toggle.displayName = 'Toggle';

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _ref = /*#__PURE__*/createElement("path", {
  fill: "currentColor",
  d: "M12.688 5.61a.5.5 0 01.69.718l-.066.062-5 4a.5.5 0 01-.542.054l-.082-.054-5-4a.5.5 0 01.55-.83l.074.05L8 9.359l4.688-3.75z"
});

function SvgChevronDownStroke(props) {
  return /*#__PURE__*/createElement("svg", _extends({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref);
}

var StartIcon = function StartIcon(props) {
  return React.createElement(StyledTextMediaFigure, _extends$8({
    position: "start"
  }, props));
};
var EndIcon = function EndIcon(props) {
  return React.createElement(StyledTextMediaFigure, _extends$8({
    position: "end"
  }, props));
};
var FauxInput = forwardRef(function (_ref, ref) {
  var onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      disabled = _ref.disabled,
      readOnly = _ref.readOnly,
      controlledIsFocused = _ref.isFocused,
      props = _objectWithoutProperties(_ref, ["onFocus", "onBlur", "disabled", "readOnly", "isFocused"]);
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];
  var onFocusHandler = composeEventHandlers(onFocus, function () {
    setIsFocused(true);
  });
  var onBlurHandler = composeEventHandlers(onBlur, function () {
    setIsFocused(false);
  });
  return React.createElement(StyledTextFauxInput, _extends$8({
    onFocus: onFocusHandler,
    onBlur: onBlurHandler,
    isFocused: controlledIsFocused === undefined ? isFocused : controlledIsFocused,
    isReadOnly: readOnly,
    isDisabled: disabled,
    tabIndex: disabled ? undefined : 0,
    ref: ref
  }, props));
});
FauxInput.StartIcon = StartIcon;
FauxInput.EndIcon = EndIcon;
FauxInput.displayName = 'FauxInput';
FauxInput.propTypes = {
  isCompact: PropTypes.bool,
  isBare: PropTypes.bool,
  focusInset: PropTypes.bool,
  disabled: PropTypes.bool,
  readOnly: PropTypes.bool,
  validation: PropTypes.oneOf(['success', 'warning', 'error'])
};

var Select = React.forwardRef(function (_ref, ref) {
  var disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, ["disabled"]);
  var fieldContext = useFieldContext();
  var selectRef = useCombinedRefs(ref);
  var combinedProps = _objectSpread2({
    disabled: disabled,
    ref: selectRef
  }, props);
  if (fieldContext) {
    combinedProps = fieldContext.getInputProps(combinedProps, {
      isDescribed: true
    });
  }
  return React.createElement(StyledSelectWrapper, null, React.createElement(StyledSelect, combinedProps), !props.isBare && React.createElement(FauxInput.EndIcon, {
    isDisabled: disabled
  }, React.createElement(SvgChevronDownStroke, null)));
});
Select.propTypes = {
  isCompact: PropTypes.bool,
  isBare: PropTypes.bool,
  focusInset: PropTypes.bool,
  validation: PropTypes.oneOf(['success', 'warning', 'error'])
};

var MultiThumbRange = function MultiThumbRange(_ref) {
  var min = _ref.min,
      max = _ref.max,
      minValue = _ref.minValue,
      maxValue = _ref.maxValue,
      disabled = _ref.disabled,
      step = _ref.step,
      onChange = _ref.onChange,
      theme = _ref.theme,
      onMouseDown = _ref.onMouseDown,
      props = _objectWithoutProperties(_ref, ["min", "max", "minValue", "maxValue", "disabled", "step", "onChange", "theme", "onMouseDown"]);
  var themedDocument = useDocument(theme);
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isMinThumbFocused = _useState2[0],
      setIsMinThumbFocused = _useState2[1];
  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      railWidth = _useState4[0],
      setRailWidth = _useState4[1];
  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isMousedDown = _useState6[0],
      setIsMousedDown = _useState6[1];
  var trackRailRef = useRef(null);
  var minThumbRef = useRef(null);
  var maxThumbRef = useRef(null);
  var fieldContext = useFieldContext();
  var _ref2 = fieldContext || {},
      isLabelHovered = _ref2.isLabelHovered,
      isLabelActive = _ref2.isLabelActive,
      multiThumbRangeRef = _ref2.multiThumbRangeRef;
  var onWindowResize = useCallback(debounce(function () {
    if (trackRailRef.current) {
      setRailWidth(trackRailRef.current.getBoundingClientRect().width);
    }
  }, 100), []);
  useEffect(function () {
    if (multiThumbRangeRef) {
      multiThumbRangeRef.current = minThumbRef.current;
    }
  }, [multiThumbRangeRef]);
  useEffect(function () {
    onWindowResize();
    window.addEventListener('resize', onWindowResize);
    return function () {
      window.removeEventListener('resize', onWindowResize);
    };
  }, [onWindowResize]);
  var calculateMinPosition = useCallback(function (minDistance) {
    var boundedMinValue = minValue;
    if (boundedMinValue < min) {
      boundedMinValue = min;
    } else if (boundedMinValue > maxValue) {
      boundedMinValue = maxValue;
    } else if (boundedMinValue > max) {
      boundedMinValue = max;
    }
    return (boundedMinValue - min) / (max - min) * (railWidth - minDistance);
  }, [max, maxValue, min, minValue, railWidth]);
  var calculateMaxPosition = useCallback(function (minDistance) {
    var boundedMaxValue = maxValue;
    if (boundedMaxValue > max) {
      boundedMaxValue = max;
    } else if (boundedMaxValue < minValue) {
      boundedMaxValue = minValue;
    } else if (boundedMaxValue < min) {
      boundedMaxValue = min;
    }
    return (boundedMaxValue - min) / (max - min) * (railWidth - minDistance) + minDistance;
  }, [max, maxValue, min, minValue, railWidth]);
  var onRangeValuesChange = useCallback(function () {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        newMinValue = _ref3.minValue,
        newMaxValue = _ref3.maxValue;
    if (disabled) {
      return;
    }
    if (onChange && (newMinValue !== minValue || newMaxValue !== maxValue)) {
      onChange({
        minValue: newMinValue,
        maxValue: newMaxValue
      });
    }
  }, [disabled, maxValue, minValue, onChange]);
  var updateMinThumbSlider = useCallback(function (value) {
    var managedValue = value;
    if (value < min) {
      managedValue = min;
    } else if (value > maxValue) {
      managedValue = maxValue;
    }
    onRangeValuesChange({
      maxValue: maxValue,
      minValue: managedValue
    });
  }, [maxValue, min, onRangeValuesChange]);
  var updateMaxThumbSlider = useCallback(function (value) {
    var managedValue = value;
    if (value < minValue) {
      managedValue = minValue;
    } else if (value > max) {
      managedValue = max;
    }
    onRangeValuesChange({
      maxValue: managedValue,
      minValue: minValue
    });
  }, [max, minValue, onRangeValuesChange]);
  var calculateUpdatedValue = useCallback(function (e) {
    if (!trackRailRef.current) {
      return undefined;
    }
    var trackOffsetLeft = trackRailRef.current.getBoundingClientRect().left;
    var trackOffsetRight = trackOffsetLeft + trackRailRef.current.getBoundingClientRect().width;
    var trackWidth = trackRailRef.current.getBoundingClientRect().width;
    var diffX = e.pageX - (theme.rtl ? trackOffsetRight : trackOffsetLeft);
    if (theme.rtl) {
      diffX *= -1;
    }
    var newValue = min + parseInt((max - min) * diffX / trackWidth, 10);
    return Math.floor(newValue / step) * step;
  }, [max, min, step, theme.rtl]);
  var onDocumentMouseMove = useCallback(function (e) {
    var newValue = calculateUpdatedValue(e);
    if (isMinThumbFocused) {
      updateMinThumbSlider(newValue);
    } else {
      updateMaxThumbSlider(newValue);
    }
  }, [calculateUpdatedValue, isMinThumbFocused, updateMinThumbSlider, updateMaxThumbSlider]);
  var removeDragEvents = useCallback(function () {
    if (themedDocument) {
      themedDocument.removeEventListener('mousemove', onDocumentMouseMove);
      themedDocument.removeEventListener('mouseup', removeDragEvents);
    }
    setIsMousedDown(false);
  }, [onDocumentMouseMove, themedDocument]);
  var onTrackMouseDown = useCallback(function (e) {
    if (e.button !== 0 || disabled) {
      return;
    }
    e.preventDefault();
    var valueAtMouseDown = calculateUpdatedValue(e);
    if (valueAtMouseDown === undefined || minValue === undefined || maxValue === undefined) {
      return;
    }
    var distanceFromMinThumb = Math.abs(minValue - valueAtMouseDown);
    var distanceFromMaxThumb = Math.abs(maxValue - valueAtMouseDown);
    if (distanceFromMinThumb <= distanceFromMaxThumb) {
      minThumbRef.current && minThumbRef.current.focus();
      updateMinThumbSlider(valueAtMouseDown);
    } else {
      maxThumbRef.current && maxThumbRef.current.focus();
      updateMaxThumbSlider(valueAtMouseDown);
    }
  }, [calculateUpdatedValue, disabled, maxValue, minValue, updateMaxThumbSlider, updateMinThumbSlider]);
  useEffect(function () {
    if (isMousedDown && themedDocument) {
      themedDocument.addEventListener('mousemove', onDocumentMouseMove);
      themedDocument.addEventListener('mouseup', removeDragEvents);
    }
    return function () {
      if (isMousedDown && themedDocument) {
        themedDocument.removeEventListener('mousemove', onDocumentMouseMove);
        themedDocument.removeEventListener('mouseup', removeDragEvents);
      }
    };
  }, [isMousedDown, onDocumentMouseMove, removeDragEvents, themedDocument]);
  var _onKeyDown = function onKeyDown(type) {
    return function (e) {
      var isMinThumb = type === 'min';
      var keyIntercepted = false;
      var decrementThumb = function decrementThumb() {
        if (isMinThumb) {
          updateMinThumbSlider(minValue - step);
        } else {
          updateMaxThumbSlider(maxValue - step);
        }
      };
      var incrementThumb = function incrementThumb() {
        if (isMinThumb) {
          updateMinThumbSlider(minValue + step);
        } else {
          updateMaxThumbSlider(maxValue + step);
        }
      };
      switch (e.keyCode) {
        case KEY_CODES.LEFT:
          if (theme.rtl) {
            incrementThumb();
          } else {
            decrementThumb();
          }
          keyIntercepted = true;
          break;
        case KEY_CODES.DOWN:
          decrementThumb();
          keyIntercepted = true;
          break;
        case KEY_CODES.RIGHT:
          if (theme.rtl) {
            decrementThumb();
          } else {
            incrementThumb();
          }
          keyIntercepted = true;
          break;
        case KEY_CODES.UP:
          incrementThumb();
          keyIntercepted = true;
          break;
        case KEY_CODES.HOME:
          if (isMinThumb) {
            updateMinThumbSlider(min);
          } else {
            updateMaxThumbSlider(min);
          }
          keyIntercepted = true;
          break;
        case KEY_CODES.END:
          if (isMinThumb) {
            updateMinThumbSlider(max);
          } else {
            updateMaxThumbSlider(max);
          }
          keyIntercepted = true;
          break;
      }
      if (keyIntercepted) {
        e.preventDefault();
        e.stopPropagation();
      }
    };
  };
  var MIN_DISTANCE = 0;
  var minPosition = calculateMinPosition(MIN_DISTANCE);
  var maxPosition = calculateMaxPosition(MIN_DISTANCE);
  var sliderBackgroundSize = Math.abs(maxPosition) - Math.abs(minPosition);
  var onSliderMouseDown = composeEventHandlers(onMouseDown, onTrackMouseDown);
  return React.createElement(StyledSlider, _extends$8({
    isDisabled: disabled,
    onMouseDown: onSliderMouseDown
  }, props), React.createElement(StyledSliderTrack, {
    backgroundSize: sliderBackgroundSize,
    backgroundPosition: theme.rtl ? railWidth - maxPosition : minPosition,
    isDisabled: disabled
  }, React.createElement(StyledSliderTrackRail, {
    ref: trackRailRef
  }, React.createElement(StyledSliderThumb, {
    role: "slider",
    tabIndex: disabled ? undefined : 0,
    "aria-valuemin": min,
    "aria-valuemax": maxValue,
    "aria-valuenow": minValue,
    "aria-valuetext": minValue,
    isDisabled: disabled,
    position: minPosition,
    ref: minThumbRef,
    onKeyDown: function onKeyDown(e) {
      return _onKeyDown('min')(e);
    },
    onFocus: function onFocus() {
      setIsMinThumbFocused(true);
    },
    onBlur: function onBlur() {
      setIsMinThumbFocused(false);
    },
    onMouseDown: function onMouseDown(e) {
      setIsMousedDown(true);
      e.preventDefault();
      e.stopPropagation();
      minThumbRef.current && minThumbRef.current.focus();
    },
    "data-garden-active": isLabelActive,
    "data-garden-hover": isLabelHovered
  }), React.createElement(StyledSliderThumb, {
    role: "slider",
    tabIndex: disabled ? undefined : 0,
    "aria-valuemin": minValue,
    "aria-valuemax": max,
    "aria-valuenow": maxValue,
    "aria-valuetext": maxValue,
    isDisabled: disabled,
    position: maxPosition,
    onKeyDown: function onKeyDown(e) {
      return _onKeyDown('max')(e);
    },
    ref: maxThumbRef,
    onMouseDown: function onMouseDown(e) {
      setIsMousedDown(true);
      e.preventDefault();
      e.stopPropagation();
      maxThumbRef.current && maxThumbRef.current.focus();
    }
  }))));
};
MultiThumbRange.propTypes = {
  min: PropTypes.number,
  max: PropTypes.number,
  minValue: PropTypes.number,
  maxValue: PropTypes.number,
  step: PropTypes.number,
  disabled: PropTypes.bool,
  onChange: PropTypes.func
};
MultiThumbRange.defaultProps = {
  min: 0,
  max: 100,
  minValue: 0,
  maxValue: 100,
  step: 1,
  theme: DEFAULT_THEME
};
var MultiThumbRange$1 = withTheme(MultiThumbRange);

var TilesContext = createContext(undefined);
var useTilesContext = function useTilesContext() {
  return useContext(TilesContext);
};

var Tile = React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      value = _ref.value,
      disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, ["children", "value", "disabled"]);
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];
  var tilesContext = useTilesContext();
  var inputRef = useRef(null);
  var inputProps;
  if (tilesContext) {
    inputProps = {
      name: tilesContext.name,
      checked: tilesContext.value === value,
      onChange: tilesContext.onChange
    };
  }
  return React.createElement(StyledTile, _extends$8({
    ref: ref,
    "aria-disabled": disabled,
    isDisabled: disabled,
    isFocused: isFocused,
    isSelected: tilesContext && tilesContext.value === value
  }, props), children, React.createElement(StyledTileInput, _extends$8({}, inputProps, {
    disabled: disabled,
    value: value,
    onBlur: function onBlur() {
      return setIsFocused(false);
    },
    onFocus: function onFocus(e) {
      e.persist();
      setTimeout(function () {
        if (e.target.getAttribute('data-garden-focus-visible')) {
          setIsFocused(true);
        }
      }, 1);
    },
    type: "radio",
    ref: inputRef
  })));
});
Tile.displayName = 'Tile';
Tile.propTypes = {
  value: PropTypes.string,
  disabled: PropTypes.bool
};

var Description = React.forwardRef(function (props, ref) {
  var tilesContext = useTilesContext();
  return React.createElement(StyledTileDescription, _extends$8({
    ref: ref,
    isCentered: tilesContext && tilesContext.isCentered
  }, props));
});
Description.displayName = 'TileDescription';

var Icon = React.forwardRef(function (props, ref) {
  var tileContext = useTilesContext();
  return React.createElement(StyledTileIcon, _extends$8({
    ref: ref,
    isCentered: tileContext && tileContext.isCentered
  }, props));
});
Icon.displayName = 'TileIcon';

var Label = React.forwardRef(function (props, forwardedRef) {
  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      title = _useState2[0],
      setTitle = _useState2[1];
  var ref = useCombinedRefs(forwardedRef);
  var tilesContext = useTilesContext();
  useEffect(function () {
    if (ref.current) {
      setTitle(ref.current.textContent || undefined);
    }
  }, [ref]);
  return React.createElement(StyledTileLabel, _extends$8({
    ref: ref,
    title: title,
    isCentered: tilesContext && tilesContext.isCentered
  }, props));
});
Label.displayName = 'TileLabel';

var Tiles = React.forwardRef(function (_ref, ref) {
  var onChange = _ref.onChange,
      controlledValue = _ref.value,
      name = _ref.name,
      isCentered = _ref.isCentered,
      props = _objectWithoutProperties(_ref, ["onChange", "value", "name", "isCentered"]);
  var _useState = useState(controlledValue),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];
  var handleOnChange = useCallback(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    setValue(args[0].target.value);
    if (onChange) {
      onChange.apply(void 0, args);
    }
  }, [onChange]);
  var selectedValue = getControlledValue(controlledValue, value);
  var tileContext = useMemo(function () {
    return {
      onChange: handleOnChange,
      value: selectedValue,
      name: name,
      isCentered: isCentered
    };
  }, [handleOnChange, selectedValue, name, isCentered]);
  return React.createElement(TilesContext.Provider, {
    value: tileContext
  }, React.createElement("div", _extends$8({
    ref: ref,
    role: "radiogroup"
  }, props)));
});
Tiles.displayName = 'Tiles';
Tiles.Tile = Tile;
Tiles.Icon = Icon;
Tiles.Label = Label;
Tiles.Description = Description;
Tiles.propTypes = {
  value: PropTypes.string,
  onChange: PropTypes.func,
  name: PropTypes.string.isRequired,
  isCentered: PropTypes.bool
};
Tiles.defaultProps = {
  isCentered: true
};

var InputGroup = React.forwardRef(function (_ref, ref) {
  var isCompact = _ref.isCompact,
      props = _objectWithoutProperties(_ref, ["isCompact"]);
  var contextValue = useMemo(function () {
    return {
      isCompact: isCompact
    };
  }, [isCompact]);
  return React.createElement(InputGroupContext.Provider, {
    value: contextValue
  }, React.createElement(StyledInputGroup, _extends$8({
    ref: ref,
    isCompact: isCompact
  }, props)));
});
InputGroup.displayName = 'InputGroup';
InputGroup.propTypes = {
  isCompact: PropTypes.bool
};

var FileUpload = React.forwardRef(function (_ref, ref) {
  var disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, ["disabled"]);
  return React.createElement(StyledFileUpload, _extends$8({
    ref: ref,
    "aria-disabled": disabled
  }, props));
});
FileUpload.propTypes = {
  isDragging: PropTypes.bool,
  isCompact: PropTypes.bool,
  disabled: PropTypes.bool
};
FileUpload.displayName = 'FileUpload';

var MediaInput = React.forwardRef(function (_ref, ref) {
  var start = _ref.start,
      end = _ref.end,
      disabled = _ref.disabled,
      isCompact = _ref.isCompact,
      isBare = _ref.isBare,
      focusInset = _ref.focusInset,
      readOnly = _ref.readOnly,
      validation = _ref.validation,
      isFocused = _ref.isFocused,
      isHovered = _ref.isHovered,
      _ref$wrapperProps = _ref.wrapperProps,
      wrapperProps = _ref$wrapperProps === void 0 ? {} : _ref$wrapperProps,
      wrapperRef = _ref.wrapperRef,
      onSelect = _ref.onSelect,
      props = _objectWithoutProperties(_ref, ["start", "end", "disabled", "isCompact", "isBare", "focusInset", "readOnly", "validation", "isFocused", "isHovered", "wrapperProps", "wrapperRef", "onSelect"]);
  var fieldContext = useFieldContext();
  var inputRef = useCombinedRefs(ref);
  var onClick = wrapperProps.onClick,
      otherWrapperProps = _objectWithoutProperties(wrapperProps, ["onClick"]);
  var onFauxInputClickHandler = composeEventHandlers(onClick, function () {
    inputRef.current && inputRef.current.focus();
  });
  var onSelectHandler = readOnly ? composeEventHandlers(onSelect, function (event) {
    event.currentTarget.select();
  }) : onSelect;
  var combinedProps = _objectSpread2({
    disabled: disabled,
    readOnly: readOnly,
    ref: inputRef,
    onSelect: onSelectHandler
  }, props);
  var isLabelHovered;
  if (fieldContext) {
    combinedProps = fieldContext.getInputProps(combinedProps, {
      isDescribed: true
    });
    isLabelHovered = fieldContext.isLabelHovered;
  }
  return React.createElement(FauxInput, _extends$8({
    tabIndex: null,
    onClick: onFauxInputClickHandler,
    disabled: disabled,
    isFocused: isFocused,
    isHovered: isHovered || isLabelHovered,
    isCompact: isCompact,
    isBare: isBare,
    focusInset: focusInset,
    readOnly: readOnly,
    validation: validation,
    mediaLayout: true,
    ref: wrapperRef
  }, otherWrapperProps), start && React.createElement(FauxInput.StartIcon, {
    isDisabled: disabled
  }, start), React.createElement(StyledTextMediaInput, combinedProps), end && React.createElement(FauxInput.EndIcon, {
    isDisabled: disabled
  }, end));
});
MediaInput.propTypes = {
  isCompact: PropTypes.bool,
  isBare: PropTypes.bool,
  focusInset: PropTypes.bool,
  start: PropTypes.node,
  end: PropTypes.node,
  validation: PropTypes.oneOf(['success', 'warning', 'error']),
  wrapperProps: PropTypes.object
};

export { Checkbox, FauxInput, Field, FileUpload, Hint, Input, InputGroup, Label$1 as Label, MediaInput, Message, MultiThumbRange$1 as MultiThumbRange, Radio, Range, Select, Textarea, Tiles, Toggle };
