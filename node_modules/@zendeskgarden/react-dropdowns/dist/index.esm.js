/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

import React, { useContext, useRef, createElement, Children, useState, useEffect, useCallback, useMemo } from 'react';
import PropTypes from 'prop-types';
import Downshift from 'downshift';
export { resetIdCounter } from 'downshift';
import { Manager, Reference, Popper } from 'react-popper';
import { withTheme, isRtl, arrowStyles, retrieveComponentStyles, DEFAULT_THEME, menuStyles, getColor, getLineHeight } from '@zendeskgarden/react-theming';
import { composeEventHandlers, KEY_CODES, useCombinedRefs } from '@zendeskgarden/container-utilities';
import styled, { css } from 'styled-components';
import { math } from 'polished';
import { FauxInput, Input, Field as Field$1, Hint as Hint$1, Label as Label$1, Message as Message$1 } from '@zendeskgarden/react-forms';
import { useSelection } from '@zendeskgarden/container-selection';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var DropdownContext = React.createContext(undefined);
var useDropdownContext = function useDropdownContext() {
  var dropdownContext = useContext(DropdownContext);
  if (!dropdownContext) {
    throw new Error('This component must be rendered within a `Dropdown` component.');
  }
  return dropdownContext;
};

var REMOVE_ITEM_STATE_TYPE = 'REMOVE_ITEM';
var Dropdown = function Dropdown(props) {
  var children = props.children,
      isOpen = props.isOpen,
      selectedItem = props.selectedItem,
      selectedItems = props.selectedItems,
      highlightedIndex = props.highlightedIndex,
      inputValue = props.inputValue,
      onSelect = props.onSelect,
      _onStateChange = props.onStateChange,
      _onInputValueChange = props.onInputValueChange,
      downshiftProps = props.downshiftProps;
  var itemIndexRef = useRef(0);
  var previousItemRef = useRef(undefined);
  var previousIndexRef = useRef(undefined);
  var nextItemsHashRef = useRef({});
  var containsMultiselectRef = useRef(false);
  var itemSearchRegistry = useRef([]);
  var hasMenuRef = useRef(false);
  var popperReferenceElementRef = useRef(null);
  var customGetInputProps = function customGetInputProps(_ref, downshift, rtl) {
    var onKeyDown = _ref.onKeyDown,
        other = _objectWithoutProperties(_ref, ["onKeyDown"]);
    return _objectSpread2({
      onKeyDown: composeEventHandlers(onKeyDown, function (e) {
        var PREVIOUS_KEY = rtl ? KEY_CODES.RIGHT : KEY_CODES.LEFT;
        var NEXT_KEY = rtl ? KEY_CODES.LEFT : KEY_CODES.RIGHT;
        if (downshift.isOpen) {
          if (e.keyCode === PREVIOUS_KEY && previousIndexRef.current !== null && previousIndexRef.current !== undefined && !downshift.inputValue) {
            e.preventDefault();
            e.stopPropagation();
            downshift.selectItemAtIndex(previousIndexRef.current);
          }
          if (e.keyCode === NEXT_KEY) {
            var nextItemIndexes = Object.values(nextItemsHashRef.current);
            if (nextItemIndexes.includes(downshift.highlightedIndex)) {
              e.preventDefault();
              e.stopPropagation();
              downshift.selectItemAtIndex(downshift.highlightedIndex);
            }
          }
        } else if ((e.keyCode === KEY_CODES.ENTER || e.keyCode === KEY_CODES.SPACE) && !downshift.isOpen) {
          e.preventDefault();
          e.stopPropagation();
          downshift.openMenu();
        }
      })
    }, other);
  };
  var transformDownshift = function transformDownshift(_ref2) {
    var _getInputProps = _ref2.getInputProps,
        _getToggleButtonProps = _ref2.getToggleButtonProps,
        downshift = _objectWithoutProperties(_ref2, ["getInputProps", "getToggleButtonProps"]);
    return _objectSpread2({
      getInputProps: function getInputProps(p) {
        return _getInputProps(customGetInputProps(p, downshift, isRtl(props)));
      },
      getToggleButtonProps: function getToggleButtonProps(p) {
        return _getToggleButtonProps(_objectSpread2({
          'aria-label': undefined
        }, p));
      }
    }, downshift);
  };
  return React.createElement(Manager, null, React.createElement(Downshift, _extends({
    suppressRefError: true
    ,
    isOpen: isOpen,
    highlightedIndex: highlightedIndex,
    selectedItem: selectedItem || null
    ,
    inputValue: inputValue,
    onInputValueChange: function onInputValueChange(inputVal, stateAndHelpers) {
      if (_onInputValueChange) {
        if (stateAndHelpers.isOpen) {
          _onInputValueChange(inputVal, stateAndHelpers);
        } else {
          _onInputValueChange('', stateAndHelpers);
        }
      }
    },
    onStateChange: function onStateChange(changes, stateAndHelpers) {
      if (Object.prototype.hasOwnProperty.call(changes, 'selectedItem') && changes.selectedItem !== null) {
        if (selectedItems) {
          var itemToString = stateAndHelpers.itemToString;
          var existingItemIndex = selectedItems.findIndex(function (item) {
            return itemToString(item) === itemToString(changes.selectedItem);
          });
          var updatedSelectedItems = Array.from(selectedItems);
          if (existingItemIndex === -1) {
            updatedSelectedItems.splice(updatedSelectedItems.length, 0, changes.selectedItem);
          } else {
            updatedSelectedItems.splice(existingItemIndex, 1);
          }
          changes.selectedItems = updatedSelectedItems;
          delete changes.selectedItem;
          onSelect && onSelect(updatedSelectedItems, stateAndHelpers);
        } else {
          onSelect && onSelect(changes.selectedItem, stateAndHelpers);
        }
        stateAndHelpers.setState({
          inputValue: ''
        });
      }
      _onStateChange && _onStateChange(changes, stateAndHelpers);
    },
    stateReducer: function stateReducer(_state, changes) {
      switch (changes.type) {
        case Downshift.stateChangeTypes.controlledPropUpdatedSelectedItem:
        case Downshift.stateChangeTypes.mouseUp:
        case Downshift.stateChangeTypes.keyDownSpaceButton:
        case Downshift.stateChangeTypes.blurButton:
        case Downshift.stateChangeTypes.blurInput:
          return _objectSpread2(_objectSpread2({}, changes), {}, {
            inputValue: ''
          });
        case Downshift.stateChangeTypes.keyDownEnter:
        case Downshift.stateChangeTypes.clickItem:
        case REMOVE_ITEM_STATE_TYPE:
          return _objectSpread2(_objectSpread2({}, changes), {}, {
            inputValue: '',
            isOpen: false
          });
        default:
          return changes;
      }
    }
  }, downshiftProps), function (downshift) {
    return React.createElement(DropdownContext.Provider, {
      value: {
        hasMenuRef: hasMenuRef,
        itemIndexRef: itemIndexRef,
        previousItemRef: previousItemRef,
        previousIndexRef: previousIndexRef,
        nextItemsHashRef: nextItemsHashRef,
        popperReferenceElementRef: popperReferenceElementRef,
        selectedItems: selectedItems,
        downshift: transformDownshift(downshift),
        containsMultiselectRef: containsMultiselectRef,
        itemSearchRegistry: itemSearchRegistry
      }
    }, children);
  }));
};
Dropdown.propTypes = {
  isOpen: PropTypes.bool,
  selectedItem: PropTypes.any,
  selectedItems: PropTypes.arrayOf(PropTypes.any),
  highlightedIndex: PropTypes.number,
  inputValue: PropTypes.string,
  onSelect: PropTypes.func,
  onStateChange: PropTypes.func,
  downshiftProps: PropTypes.object
};
var Dropdown$1 = withTheme(Dropdown);

function getPopperPlacement(gardenPlacement) {
  switch (gardenPlacement) {
    case 'end':
      return 'right';
    case 'end-top':
      return 'right-start';
    case 'end-bottom':
      return 'right-end';
    case 'start':
      return 'left';
    case 'start-top':
      return 'left-start';
    case 'start-bottom':
      return 'left-end';
    default:
      return gardenPlacement;
  }
}
function getRtlPopperPlacement(gardenPlacement) {
  var popperPlacement = getPopperPlacement(gardenPlacement);
  switch (popperPlacement) {
    case 'left':
      return 'right';
    case 'left-start':
      return 'right-start';
    case 'left-end':
      return 'right-end';
    case 'top-start':
      return 'top-end';
    case 'top-end':
      return 'top-start';
    case 'right':
      return 'left';
    case 'right-start':
      return 'left-start';
    case 'right-end':
      return 'left-end';
    case 'bottom-start':
      return 'bottom-end';
    case 'bottom-end':
      return 'bottom-start';
    default:
      return popperPlacement;
  }
}
function getArrowPosition(popperPlacement) {
  var arrowPositionMappings = {
    auto: 'top',
    top: 'bottom',
    'top-start': 'bottom-left',
    'top-end': 'bottom-right',
    right: 'left',
    'right-start': 'left-top',
    'right-end': 'left-bottom',
    bottom: 'top',
    'bottom-start': 'top-left',
    'bottom-end': 'top-right',
    left: 'right',
    'left-start': 'right-top',
    'left-end': 'right-bottom'
  };
  return popperPlacement ? arrowPositionMappings[popperPlacement] : 'top';
}
function getMenuPosition(popperPlacement) {
  if (popperPlacement === 'auto') {
    return 'bottom';
  }
  return popperPlacement ? popperPlacement.split('-')[0] : 'bottom';
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  /* stylelint-disable-next-line declaration-no-important */\n  position: static !important; /* [1] */\n  max-height: ", ";\n  overflow-y: auto;\n\n  ", ";\n\n  ", ";\n"]);
  _templateObject = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID = 'dropdowns.menu';
var StyledMenu = styled.ul.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID,
    'data-garden-version': '8.32.0',
    className: props.isAnimated && 'is-animated'
  };
})(_templateObject(), function (props) {
  return props.maxHeight;
}, function (props) {
  return props.hasArrow && arrowStyles(getArrowPosition(props.placement), {
    size: "".concat(props.theme.space.base * 2, "px"),
    inset: '2px',
    animationModifier: props.isAnimated ? '.is-animated' : undefined
  });
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID, props);
});
StyledMenu.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$1() {
  var data = _taggedTemplateLiteral(["\n  ", ";\n\n  ", ";\n"]);
  _templateObject$1 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$1 = 'dropdowns.menu_wrapper';
var StyledMenuWrapper = styled.div.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$1,
    'data-garden-version': '8.32.0',
    className: props.isAnimated && 'is-animated'
  };
})(_templateObject$1(), function (props) {
  return menuStyles(getMenuPosition(props.placement), {
    theme: props.theme,
    hidden: props.isHidden,
    margin: "".concat(props.theme.space.base * (props.hasArrow ? 2 : 1), "px"),
    zIndex: props.zIndex,
    animationModifier: props.isAnimated ? '.is-animated' : undefined
  });
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$1, props);
});
StyledMenuWrapper.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$2() {
  var data = _taggedTemplateLiteral(["\n  display: block;\n  margin: ", "px 0;\n  border-bottom: ", ";\n\n  ", ";\n"]);
  _templateObject$2 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$2 = 'dropdowns.separator';
var StyledSeparator = styled.li.attrs({
  'data-garden-id': COMPONENT_ID$2,
  'data-garden-version': '8.32.0',
  role: 'separator'
})(_templateObject$2(), function (props) {
  return props.theme.space.base;
}, function (props) {
  return "".concat(props.theme.borders.sm, " ").concat(getColor('neutralHue', 200, props.theme));
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$2, props);
});
StyledSeparator.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$3() {
  var data = _taggedTemplateLiteral(["\n  display: block;\n  position: relative; /* [1] */\n  z-index: 0; /* [2] */\n  cursor: ", ";\n  padding: ", " ", "px;\n  text-decoration: none;\n  line-height: ", "px;\n  word-wrap: break-word;\n  user-select: none;\n\n  &:first-child {\n    margin-top: ", "px;\n  }\n\n  &:last-child {\n    margin-bottom: ", "px;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  ", "\n\n  ", ";\n"]);
  _templateObject$3 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$3 = 'dropdowns.item';
var getItemPaddingVertical = function getItemPaddingVertical(props) {
  if (props.isCompact) {
    return "".concat(props.theme.space.base, "px");
  }
  return "".concat(props.theme.space.base * 2, "px");
};
var getColorStyles = function getColorStyles(props) {
  return css(["background-color:", ";color:", ";"], props.isFocused && !props.disabled && getColor('primaryHue', 600, props.theme, 0.08), props.disabled ? getColor('neutralHue', 400, props.theme) : props.theme.colors.foreground);
};
var StyledItem = styled.li.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$3,
    'data-garden-version': '8.32.0',
    'aria-disabled': props.disabled
  };
})(_templateObject$3(), function (props) {
  return props.disabled ? 'default' : 'pointer';
}, function (props) {
  return getItemPaddingVertical(props);
}, function (props) {
  return props.theme.space.base * 9;
}, function (props) {
  return props.theme.space.base * 5;
}, function (props) {
  return props.theme.space.base;
}, function (props) {
  return props.theme.space.base;
}, function (props) {
  return getColorStyles(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$3, props);
});
StyledItem.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$4() {
  var data = _taggedTemplateLiteral(["\n  color: ", ";\n\n  ", ";\n"]);
  _templateObject$4 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$4 = 'dropdowns.add_item';
var StyledAddItem = styled(StyledItem).attrs({
  'data-garden-id': COMPONENT_ID$4,
  'data-garden-version': '8.32.0'
})(_templateObject$4(), function (props) {
  return !props.disabled && getColor('primaryHue', 600, props.theme);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$4, props);
});
StyledAddItem.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$5() {
  var data = _taggedTemplateLiteral(["\n  display: ", ";\n  line-height: ", "px;\n  color: ", ";\n  font-size: ", ";\n\n  ", ";\n"]);
  _templateObject$5 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$5 = 'dropdowns.item_meta';
var StyledItemMeta = styled.span.attrs({
  'data-garden-id': COMPONENT_ID$5,
  'data-garden-version': '8.32.0'
})(_templateObject$5(), function (props) {
  return props.isCompact ? 'none' : 'block';
}, function (props) {
  return props.theme.space.base * 4;
}, function (props) {
  return getColor('neutralHue', props.isDisabled ? 400 : 600, props.theme);
}, function (props) {
  return props.theme.fontSizes.sm;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$5, props);
});
StyledItemMeta.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$6() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  position: absolute;\n  top: 0;\n  ", ": ", "px;\n  align-items: center;\n  justify-content: center;\n  transition: opacity 0.1s ease-in-out;\n  opacity: ", ";\n  color: ", ";\n\n  ", ";\n\n  & > * {\n    width: ", ";\n    height: ", ";\n  }\n"]);
  _templateObject$6 = function _templateObject() {
    return data;
  };
  return data;
}
var getSizeStyles = function getSizeStyles(props) {
  return css(["width:", ";height:calc(", "px + ", ");"], props.theme.iconSizes.md, props.theme.space.base * 5, math("".concat(getItemPaddingVertical(props), " * 2")));
};
var StyledItemIcon = styled.div(_templateObject$6(), function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return props.theme.space.base * 3;
}, function (props) {
  return props.isVisible ? '1' : '0';
}, function (props) {
  return props.isDisabled ? 'inherit' : getColor('primaryHue', 600, props.theme);
}, function (props) {
  return getSizeStyles(props);
}, function (props) {
  return props.theme.iconSizes.md;
}, function (props) {
  return props.theme.iconSizes.md;
});
StyledItemIcon.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$7() {
  var data = _taggedTemplateLiteral(["\n  ", " {\n    right: ", ";\n    left: ", ";\n  }\n\n  ", ";\n"]);
  _templateObject$7 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$6 = 'dropdowns.next_item';
var StyledNextItem = styled(StyledItem).attrs({
  'data-garden-id': COMPONENT_ID$6,
  'data-garden-version': '8.32.0'
})(_templateObject$7(), StyledItemIcon, function (props) {
  return props.theme.rtl ? 'auto' : "".concat(props.theme.space.base * 3, "px");
}, function (props) {
  return props.theme.rtl ? "".concat(props.theme.space.base * 3, "px") : 'auto';
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$6, props);
});
StyledNextItem.defaultProps = {
  theme: DEFAULT_THEME
};

function _extends$1() { _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }

var _ref = /*#__PURE__*/createElement("path", {
  fill: "currentColor",
  d: "M5.61 3.312a.5.5 0 01.718-.69l.062.066 4 5a.5.5 0 01.054.542l-.054.082-4 5a.5.5 0 01-.83-.55l.05-.074L9.359 8l-3.75-4.688z"
});

function SvgChevronRightStroke(props) {
  return /*#__PURE__*/createElement("svg", _extends$1({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref);
}

function _templateObject$8() {
  var data = _taggedTemplateLiteral(["\n  transform: ", ";\n  color: ", ";\n\n  ", ";\n"]);
  _templateObject$8 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$7 = 'dropdowns.next_item_icon';
var NextIconComponent = function NextIconComponent(_ref) {
  var className = _ref.className;
  return React.createElement(SvgChevronRightStroke, {
    "data-garden-id": COMPONENT_ID$7,
    "data-garden-version": '8.32.0',
    className: className
  });
};
var StyledNextIcon = styled(NextIconComponent)(_templateObject$8(), function (props) {
  return props.theme.rtl && 'rotate(180deg)';
}, function (props) {
  return props.isDisabled ? 'inherit' : getColor('neutralHue', 600, props.theme);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$7, props);
});
StyledNextIcon.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$9() {
  var data = _taggedTemplateLiteral(["\n  font-weight: ", ";\n\n  ", ";\n"]);
  _templateObject$9 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$8 = 'dropdowns.previous_item';
var StyledPreviousItem = styled(StyledItem).attrs({
  'data-garden-id': COMPONENT_ID$8,
  'data-garden-version': '8.32.0'
})(_templateObject$9(), function (props) {
  return props.theme.fontWeights.semibold;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$8, props);
});
StyledPreviousItem.defaultProps = {
  theme: DEFAULT_THEME
};

function _extends$2() { _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }

var _ref$1 = /*#__PURE__*/createElement("path", {
  fill: "currentColor",
  d: "M10.39 12.688a.5.5 0 01-.718.69l-.062-.066-4-5a.5.5 0 01-.054-.542l.054-.082 4-5a.5.5 0 01.83.55l-.05.074L6.641 8l3.75 4.688z"
});

function SvgChevronLeftStroke(props) {
  return /*#__PURE__*/createElement("svg", _extends$2({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$1);
}

function _templateObject$a() {
  var data = _taggedTemplateLiteral(["\n  transform: ", ";\n  color: ", ";\n\n  ", ";\n"]);
  _templateObject$a = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$9 = 'dropdowns.previous_item_icon';
var PreviousIconComponent = function PreviousIconComponent(_ref) {
  var className = _ref.className;
  return React.createElement(SvgChevronLeftStroke, {
    "data-garden-id": COMPONENT_ID$9,
    "data-garden-version": '8.32.0',
    className: className
  });
};
var StyledPreviousIcon = styled(PreviousIconComponent)(_templateObject$a(), function (props) {
  return props.theme.rtl && 'rotate(180deg)';
}, function (props) {
  return props.isDisabled ? 'inherit' : getColor('neutralHue', 600, props.theme);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$9, props);
});
StyledPreviousIcon.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$b() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  align-items: center;\n  justify-content: center;\n  ", ": ", "px;\n  color: ", ";\n\n  & > * {\n    width: ", ";\n    height: ", ";\n  }\n\n  ", ";\n"]);
  _templateObject$b = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$a = 'dropdowns.header_icon';
var StyledHeaderIcon = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$a,
  'data-garden-version': '8.32.0'
})(_templateObject$b(), function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return props.theme.space.base * 3;
}, function (props) {
  return getColor('neutralHue', 600, props.theme);
}, function (props) {
  return props.theme.iconSizes.md;
}, function (props) {
  return props.theme.iconSizes.md;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$a, props);
});
StyledHeaderIcon.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$c() {
  var data = _taggedTemplateLiteral(["\n  cursor: default;\n  padding-right: ", ";\n  padding-left: ", ";\n  font-weight: ", ";\n\n  ", ";\n"]);
  _templateObject$c = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$b = 'dropdowns.header_item';
var getHorizontalPadding = function getHorizontalPadding(props) {
  if (props.hasIcon) {
    return undefined;
  }
  return "".concat(props.theme.space.base * 3, "px");
};
var StyledHeaderItem = styled(StyledItem).attrs({
  'data-garden-id': COMPONENT_ID$b,
  'data-garden-version': '8.32.0'
})(_templateObject$c(), function (props) {
  return getHorizontalPadding(props);
}, function (props) {
  return getHorizontalPadding(props);
}, function (props) {
  return props.theme.fontWeights.semibold;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$b, props);
});
StyledHeaderItem.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$d() {
  var data = _taggedTemplateLiteral(["\n  display: block;\n  overflow: hidden;\n  /* stylelint-disable-next-line property-no-unknown */\n  padding-", ": ", "px;\n\n  ", ";\n"]);
  _templateObject$d = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$c = 'dropdowns.media_body';
var StyledMediaBody = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$c,
  'data-garden-version': '8.32.0'
})(_templateObject$d(), function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return props.theme.space.base * 2;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$c, props);
});
StyledMediaBody.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$e() {
  var data = _taggedTemplateLiteral(["\n  float: ", ";\n  /* stylelint-disable declaration-no-important */\n  margin-top: ", "px !important; /* [1] */\n  /* stylelint-enable declaration-no-important */\n  width: ", ";\n  height: ", ";\n\n  ", ";\n"]);
  _templateObject$e = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$d = 'dropdowns.media_figure';
var StyledMediaFigure = styled(
function (_ref) {
  var children = _ref.children;
      _ref.isCompact;
      _ref.theme;
      var props = _objectWithoutProperties(_ref, ["children", "isCompact", "theme"]);
  return (
    React.cloneElement(Children.only(children), props)
  );
}).attrs({
  'data-garden-id': COMPONENT_ID$d,
  'data-garden-version': '8.32.0'
})(_templateObject$e(), function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return props.theme.space.base * 0.5;
}, function (props) {
  return props.theme.iconSizes.md;
}, function (props) {
  return props.theme.iconSizes.md;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$d, props);
});
StyledMediaFigure.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$f() {
  var data = _taggedTemplateLiteral(["\n  ", ";\n"]);
  _templateObject$f = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$e = 'dropdowns.media_item';
var StyledMediaItem = styled(StyledItem).attrs({
  'data-garden-id': COMPONENT_ID$e,
  'data-garden-version': '8.32.0'
})(_templateObject$f(), function (props) {
  return retrieveComponentStyles(COMPONENT_ID$e, props);
});
StyledMediaItem.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$g() {
  var data = _taggedTemplateLiteral(["\n  cursor: ", ";\n  min-width: ", "px;\n\n  ", ";\n"]);
  _templateObject$g = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$f = 'dropdowns.faux_input';
var StyledFauxInput = styled(FauxInput).attrs({
  'data-garden-id': COMPONENT_ID$f,
  'data-garden-version': '8.32.0',
  mediaLayout: true
})(_templateObject$g(), function (props) {
  return !props.disabled && 'pointer';
}, function (props) {
  return props.theme.space.base * (props.isCompact ? 25 : 36);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$f, props);
});
StyledFauxInput.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$h() {
  var data = _taggedTemplateLiteral(["\n  ", ";\n\n  ", ";\n"]);
  _templateObject$h = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$g = 'dropdowns.input';
var hiddenStyling = css(["position:fixed;border:0;clip:rect(1px,1px,1px,1px);padding:0;width:1px;height:1px;overflow:hidden;white-space:nowrap;"]);
var StyledInput = styled(Input).attrs({
  'data-garden-id': COMPONENT_ID$g,
  'data-garden-version': '8.32.0',
  isBare: true
})(_templateObject$h(), function (props) {
  return props.isHidden && hiddenStyling;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$g, props);
});
StyledInput.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$i() {
  var data = _taggedTemplateLiteral(["\n  flex-grow: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  ", ";\n"]);
  _templateObject$i = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$h = 'dropdowns.select';
var StyledSelect = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$h,
  'data-garden-version': '8.32.0'
})(_templateObject$i(), function (props) {
  return retrieveComponentStyles(COMPONENT_ID$h, props);
});
StyledSelect.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$j() {
  var data = _taggedTemplateLiteral(["\n  flex-basis: ", "px;\n  flex-grow: 1;\n  align-self: center;\n  min-height: 0;\n\n  ", ";\n\n  ", ";\n"]);
  _templateObject$j = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$i = 'dropdowns.multiselect_input';
var visibleStyling = function visibleStyling(props) {
  var margin = props.isVisible ? "".concat(props.theme.space.base / 2, "px") : 0;
  var minWidth = props.isVisible ? "".concat(props.theme.space.base * 15, "px") : 0;
  var height = '0';
  if (props.isVisible) {
    height = "".concat(props.theme.space.base * (props.isCompact ? 5 : 8), "px");
  }
  return css(["opacity:", ";margin:", ";width:", ";min-width:", ";height:", ";"], !props.isVisible && 0, margin, !props.isVisible && 0, minWidth, height);
};
var StyledMultiselectInput = styled(StyledInput).attrs({
  'data-garden-id': COMPONENT_ID$i,
  'data-garden-version': '8.32.0'
})(_templateObject$j(), function (props) {
  return props.theme.space.base * 15;
}, function (props) {
  return visibleStyling(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$i, props);
});
StyledMultiselectInput.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$k() {
  var data = _taggedTemplateLiteral(["\n  display: inline-flex;\n  flex-grow: 1;\n  flex-wrap: wrap;\n  min-width: 0;\n\n  ", ";\n\n  ", ";\n"]);
  _templateObject$k = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$j = 'dropdowns.multiselect_items_container';
var sizeStyles = function sizeStyles(props) {
  var margin;
  var padding;
  if (!props.isBare) {
    var marginVertical = props.isCompact ? "-".concat(props.theme.space.base * 1.5, "px") : "-".concat(props.theme.space.base * 2.5, "px");
    margin = "".concat(marginVertical, " 0");
    var paddingVertical = props.isCompact ? '3px' : '1px';
    var paddingEnd = "".concat(props.theme.space.base, "px");
    padding = "".concat(paddingVertical, " ").concat(props.theme.rtl ? 0 : paddingEnd, " ").concat(paddingVertical, " ").concat(props.theme.rtl ? paddingEnd : 0);
  }
  return css(["margin:", ";padding:", ";"], margin, padding);
};
var StyledMultiselectItemsContainer = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$j,
  'data-garden-version': '8.32.0'
})(_templateObject$k(), function (props) {
  return sizeStyles(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$j, props);
});
StyledMultiselectItemsContainer.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$l() {
  var data = _taggedTemplateLiteral(["\n  display: inline-flex;\n  align-items: center;\n  margin: ", "px;\n  max-width: 100%;\n\n  ", ";\n"]);
  _templateObject$l = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$k = 'dropdowns.multiselect_item_wrapper';
var StyledMultiselectItemWrapper = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$k,
  'data-garden-version': '8.32.0'
})(_templateObject$l(), function (props) {
  return props.theme.space.base / 2;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$k, props);
});
StyledMultiselectItemWrapper.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$m() {
  var data = _taggedTemplateLiteral(["\n  display: inline-block;\n  cursor: ", ";\n  padding: ", "px 0;\n  overflow: hidden;\n  user-select: none;\n  text-overflow: ellipsis;\n  line-height: ", ";\n  white-space: nowrap;\n  color: ", ";\n\n  :hover {\n    text-decoration: ", ";\n  }\n\n  ", ";\n"]);
  _templateObject$m = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$l = 'dropdowns.multiselect_more_anchor';
var StyledMultiselectMoreAnchor = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$l,
  'data-garden-version': '8.32.0'
})(_templateObject$m(), function (props) {
  return props.isDisabled ? 'default' : 'pointer';
}, function (props) {
  return props.theme.space.base * (props.isCompact ? 0.75 : 1.5);
}, function (props) {
  return props.isCompact ? '1em' : getLineHeight(props.theme.space.base * 5, props.theme.fontSizes.md);
}, function (props) {
  return props.isDisabled ? getColor('neutralHue', 400, props.theme) : getColor('primaryHue', 600, props.theme);
}, function (props) {
  return !props.isDisabled && 'underline';
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$l, props);
});
StyledMultiselectMoreAnchor.defaultProps = {
  theme: DEFAULT_THEME
};

var Trigger = function Trigger(_ref) {
  var children = _ref.children,
      refKey = _ref.refKey,
      triggerProps = _objectWithoutProperties(_ref, ["children", "refKey"]);
  var _useDropdownContext = useDropdownContext(),
      hasMenuRef = _useDropdownContext.hasMenuRef,
      itemSearchRegistry = _useDropdownContext.itemSearchRegistry,
      _useDropdownContext$d = _useDropdownContext.downshift,
      getRootProps = _useDropdownContext$d.getRootProps,
      getToggleButtonProps = _useDropdownContext$d.getToggleButtonProps,
      getInputProps = _useDropdownContext$d.getInputProps,
      isOpen = _useDropdownContext$d.isOpen,
      highlightedIndex = _useDropdownContext$d.highlightedIndex,
      selectItemAtIndex = _useDropdownContext$d.selectItemAtIndex,
      setHighlightedIndex = _useDropdownContext$d.setHighlightedIndex;
  var hiddenInputRef = useRef(null);
  var triggerRef = useRef(null);
  var previousIsOpenRef = useRef(undefined);
  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      searchString = _useState2[0],
      setSearchString = _useState2[1];
  var searchTimeoutRef = useRef();
  var currentSearchIndexRef = useRef(0);
  useEffect(function () {
    if (hiddenInputRef.current && isOpen && !previousIsOpenRef.current) {
      hiddenInputRef.current.focus();
    }
    if (triggerRef.current && !isOpen && previousIsOpenRef.current) {
      triggerRef.current.focus();
    }
    previousIsOpenRef.current = isOpen;
  }, [isOpen, hasMenuRef]);
  useEffect(function () {
    if (hasMenuRef.current === false) {
      hasMenuRef.current = true;
    }
  }, [hasMenuRef]);
  useEffect(function () {
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
    searchTimeoutRef.current = window.setTimeout(function () {
      setSearchString('');
    }, 500);
    return function () {
      clearTimeout(searchTimeoutRef.current);
    };
  }, [searchString]);
  var searchItems = useCallback(function (searchValue, startIndex, endIndex) {
    for (var index = startIndex; index < endIndex; index++) {
      var itemTextValue = itemSearchRegistry.current[index];
      if (itemTextValue && itemTextValue.toUpperCase().indexOf(searchValue.toUpperCase()) === 0) {
        return index;
      }
    }
    return undefined;
  }, [itemSearchRegistry]);
  var onInputKeyDown = useCallback(function (e) {
    if (e.keyCode === KEY_CODES.SPACE) {
      if (searchString) {
        e.preventDefault();
        e.stopPropagation();
      } else if (highlightedIndex !== null && highlightedIndex !== undefined) {
        e.preventDefault();
        e.stopPropagation();
        selectItemAtIndex(highlightedIndex);
      }
    }
    if ((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 65 || e.keyCode > 90) && e.keyCode !== KEY_CODES.SPACE) {
      return;
    }
    var character = String.fromCharCode(e.which || e.keyCode);
    if (!character || character.length === 0) {
      return;
    }
    if (!searchString) {
      if (highlightedIndex === null || highlightedIndex === undefined) {
        currentSearchIndexRef.current = -1;
      } else {
        currentSearchIndexRef.current = highlightedIndex;
      }
    }
    var newSearchString = searchString + character;
    setSearchString(newSearchString);
    var matchingIndex = searchItems(newSearchString, currentSearchIndexRef.current + 1, itemSearchRegistry.current.length);
    if (matchingIndex === undefined) {
      matchingIndex = searchItems(newSearchString, 0, currentSearchIndexRef.current);
    }
    if (matchingIndex !== undefined) {
      setHighlightedIndex(matchingIndex);
    }
  }, [searchString, searchItems, itemSearchRegistry, highlightedIndex, selectItemAtIndex, setHighlightedIndex]);
  var renderChildren = function renderChildren(popperRef) {
    var _getRootProps = getRootProps(),
        rootPropsRefCallback = _getRootProps.ref,
        rootProps = _objectWithoutProperties(_getRootProps, ["ref"]);
    var listboxToggleProps = getToggleButtonProps(_objectSpread2(_objectSpread2(_objectSpread2({}, rootProps), {}, {
      role: null,
      'aria-labelledby': undefined
    }, triggerProps), children.props));
    var menuToggleProps = _objectSpread2(_objectSpread2({}, listboxToggleProps), {}, {
      'aria-haspopup': 'true',
      'aria-controls': listboxToggleProps['aria-owns'],
      'aria-owns': null
    });
    var toggleButtonProps = hasMenuRef.current ? menuToggleProps : listboxToggleProps;
    return React.cloneElement(React.Children.only(children), _objectSpread2(_objectSpread2({}, toggleButtonProps), {}, _defineProperty({}, refKey, function (childRef) {
      popperRef(childRef);
      triggerRef.current = childRef;
      rootPropsRefCallback(childRef);
    })));
  };
  return React.createElement(Reference, null, function (_ref2) {
    var popperReference = _ref2.ref;
    return React.createElement(React.Fragment, null, renderChildren(popperReference), React.createElement(StyledInput, getInputProps({
      readOnly: true,
      isHidden: true,
      tabIndex: -1,
      ref: hiddenInputRef,
      value: '',
      onClick: function onClick(e) {
        if (isOpen) {
          e.nativeEvent.preventDownshiftDefault = true;
        }
      },
      onKeyDown: onInputKeyDown
    })));
  });
};
Trigger.propTypes = {
  children: PropTypes.any,
  refKey: PropTypes.string
};
Trigger.defaultProps = {
  refKey: 'ref'
};

function _extends$3() { _extends$3 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }

var _ref$2 = /*#__PURE__*/createElement("path", {
  fill: "currentColor",
  d: "M12.688 5.61a.5.5 0 01.69.718l-.066.062-5 4a.5.5 0 01-.542.054l-.082-.054-5-4a.5.5 0 01.55-.83l.074.05L8 9.359l4.688-3.75z"
});

function SvgChevronDownStroke(props) {
  return /*#__PURE__*/createElement("svg", _extends$3({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$2);
}

var FieldContext = React.createContext(undefined);
var useFieldContext = function useFieldContext() {
  var fieldContext = useContext(FieldContext);
  if (!fieldContext) {
    throw new Error('This component must be rendered within a `Field` component.');
  }
  return fieldContext;
};

var Autocomplete = React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      controlledInputRef = _ref.inputRef,
      start = _ref.start,
      props = _objectWithoutProperties(_ref, ["children", "inputRef", "start"]);
  var _useDropdownContext = useDropdownContext(),
      popperReferenceElementRef = _useDropdownContext.popperReferenceElementRef,
      _useDropdownContext$d = _useDropdownContext.downshift,
      getToggleButtonProps = _useDropdownContext$d.getToggleButtonProps,
      getInputProps = _useDropdownContext$d.getInputProps,
      getRootProps = _useDropdownContext$d.getRootProps,
      isOpen = _useDropdownContext$d.isOpen;
  var _useFieldContext = useFieldContext(),
      isLabelHovered = _useFieldContext.isLabelHovered;
  var inputRef = useCombinedRefs(controlledInputRef);
  var triggerRef = useCombinedRefs(ref);
  var previousIsOpenRef = useRef(isOpen);
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isHovered = _useState2[0],
      setIsHovered = _useState2[1];
  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isFocused = _useState4[0],
      setIsFocused = _useState4[1];
  useEffect(function () {
    if (inputRef.current && isOpen !== previousIsOpenRef.current) {
      inputRef.current.focus();
    }
    previousIsOpenRef.current = isOpen;
  }, [inputRef, isOpen]);
  var _getToggleButtonProps = getToggleButtonProps(getRootProps(_objectSpread2({
    onKeyDown: function onKeyDown(e) {
      if (isOpen) {
        e.nativeEvent.preventDownshiftDefault = true;
      }
    },
    onMouseEnter: composeEventHandlers(props.onMouseEnter, function () {
      return setIsHovered(true);
    }),
    onMouseLeave: composeEventHandlers(props.onMouseLeave, function () {
      return setIsHovered(false);
    }),
    role: null
  }, props)));
      _getToggleButtonProps.type;
      var selectProps = _objectWithoutProperties(_getToggleButtonProps, ["type"]);
  var isContainerHovered = isLabelHovered && !isOpen;
  var isContainerFocused = isOpen || isFocused;
  return React.createElement(Reference, null, function (_ref2) {
    var popperReference = _ref2.ref;
    return React.createElement(StyledFauxInput, _extends({
      isHovered: isContainerHovered,
      isFocused: isContainerFocused,
      tabIndex: null
    }, selectProps, {
      ref: function ref(selectRef) {
        popperReference(selectRef);
        triggerRef.current = selectRef;
        popperReferenceElementRef.current = selectRef;
      }
    }), start && React.createElement(StyledFauxInput.StartIcon, {
      isDisabled: props.disabled
    }, start), !isOpen && React.createElement(StyledSelect, null, children), React.createElement(StyledInput, getInputProps({
      isHidden: !isOpen,
      disabled: props.disabled,
      onFocus: function onFocus() {
        setIsFocused(true);
      },
      onBlur: function onBlur() {
        setIsFocused(false);
      },
      onClick: function onClick(e) {
        if (isOpen) {
          e.nativeEvent.preventDownshiftDefault = true;
        }
      },
      role: 'combobox',
      ref: inputRef
    })), !props.isBare && React.createElement(StyledFauxInput.EndIcon, {
      isHovered: isHovered || isLabelHovered && !isOpen,
      isFocused: isOpen,
      isDisabled: props.disabled,
      isRotated: isOpen
    }, React.createElement(SvgChevronDownStroke, null)));
  });
});
Autocomplete.displayName = 'Autocomplete';
Autocomplete.propTypes = {
  isCompact: PropTypes.bool,
  isBare: PropTypes.bool,
  disabled: PropTypes.bool,
  focusInset: PropTypes.bool,
  isOpen: PropTypes.bool,
  validation: PropTypes.oneOf(['success', 'warning', 'error'])
};

var Multiselect = React.forwardRef(function (_ref, ref) {
  var renderItem = _ref.renderItem,
      placeholder = _ref.placeholder,
      maxItems = _ref.maxItems,
      renderShowMore = _ref.renderShowMore,
      externalInputRef = _ref.inputRef,
      start = _ref.start,
      props = _objectWithoutProperties(_ref, ["renderItem", "placeholder", "maxItems", "renderShowMore", "inputRef", "start"]);
  var _useDropdownContext = useDropdownContext(),
      popperReferenceElementRef = _useDropdownContext.popperReferenceElementRef,
      _useDropdownContext$s = _useDropdownContext.selectedItems,
      selectedItems = _useDropdownContext$s === void 0 ? [] : _useDropdownContext$s,
      containsMultiselectRef = _useDropdownContext.containsMultiselectRef,
      previousIndexRef = _useDropdownContext.previousIndexRef,
      _useDropdownContext$d = _useDropdownContext.downshift,
      getToggleButtonProps = _useDropdownContext$d.getToggleButtonProps,
      getRootProps = _useDropdownContext$d.getRootProps,
      getInputProps = _useDropdownContext$d.getInputProps,
      isOpen = _useDropdownContext$d.isOpen,
      closeMenu = _useDropdownContext$d.closeMenu,
      inputValue = _useDropdownContext$d.inputValue,
      setDownshiftState = _useDropdownContext$d.setState,
      itemToString = _useDropdownContext$d.itemToString;
  var _useFieldContext = useFieldContext(),
      isLabelHovered = _useFieldContext.isLabelHovered;
  var inputRef = useCombinedRefs(externalInputRef);
  var triggerRef = useCombinedRefs(popperReferenceElementRef, ref);
  var blurTimeoutRef = useRef();
  var previousIsOpenRef = useRef(undefined);
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isHovered = _useState2[0],
      setIsHovered = _useState2[1];
  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isFocused = _useState4[0],
      setIsFocused = _useState4[1];
  var _useState5 = useState(undefined),
      _useState6 = _slicedToArray(_useState5, 2),
      focusedItem = _useState6[0],
      setFocusedItem = _useState6[1];
  var _useSelection = useSelection({
    rtl: isRtl(props),
    focusedItem: focusedItem,
    selectedItem: undefined,
    onFocus: function onFocus(item) {
      setFocusedItem(item);
    }
  }),
      getContainerProps = _useSelection.getContainerProps,
      getItemProps = _useSelection.getItemProps;
  useEffect(function () {
    containsMultiselectRef.current = true;
    var tempRef = blurTimeoutRef;
    return function () {
      clearTimeout(tempRef.current);
    };
  }, []);
  useEffect(function () {
    if (inputRef.current && isOpen && !previousIsOpenRef.current) {
      inputRef.current.focus();
    }
    previousIsOpenRef.current = isOpen;
  }, [isOpen, inputRef]);
  useEffect(function () {
    if (focusedItem !== undefined && isOpen) {
      closeMenu();
    }
  }, [focusedItem, isOpen, closeMenu]);
  var _getToggleButtonProps = getToggleButtonProps(getRootProps(_objectSpread2({
    tabIndex: props.disabled ? undefined : -1,
    onKeyDown: function onKeyDown(e) {
      if (isOpen) {
        e.nativeEvent.preventDownshiftDefault = true;
      } else if (!inputValue && e.keyCode === KEY_CODES.HOME) {
        setFocusedItem(selectedItems[0]);
        e.preventDefault();
      }
    },
    onFocus: function onFocus() {
      setIsFocused(true);
    },
    onBlur: function onBlur(e) {
      var currentTarget = e.currentTarget;
      blurTimeoutRef.current = setTimeout(function () {
        if (!currentTarget.contains(document.activeElement)) {
          setIsFocused(false);
        }
      }, 0);
    },
    onMouseEnter: composeEventHandlers(props.onMouseEnter, function () {
      return setIsHovered(true);
    }),
    onMouseLeave: composeEventHandlers(props.onMouseLeave, function () {
      return setIsHovered(false);
    }),
    role: null
  }, props)));
      _getToggleButtonProps.type;
      var selectProps = _objectWithoutProperties(_getToggleButtonProps, ["type"]);
  var renderSelectableItem = useCallback(function (item, index) {
    var removeValue = function removeValue() {
      setDownshiftState({
        type: REMOVE_ITEM_STATE_TYPE,
        selectedItem: item
      });
      inputRef.current && inputRef.current.focus();
    };
    var renderedItem = renderItem({
      value: item,
      removeValue: removeValue
    });
    var focusRef = React.createRef();
    var clonedChild = React.cloneElement(renderedItem, _objectSpread2(_objectSpread2({}, getItemProps({
      item: item,
      focusRef: focusRef,
      onKeyDown: function onKeyDown(e) {
        if (e.keyCode === KEY_CODES.DELETE || e.keyCode === KEY_CODES.BACKSPACE) {
          e.preventDefault();
          removeValue();
        }
        if (e.keyCode === KEY_CODES.END && !inputValue) {
          inputRef.current && inputRef.current.focus();
          e.preventDefault();
        }
        if (isRtl(props)) {
          if (e.keyCode === KEY_CODES.RIGHT && index === 0) {
            e.preventDefault();
          }
          if (e.keyCode === KEY_CODES.LEFT && index === selectedItems.length - 1) {
            e.preventDefault();
            inputRef.current && inputRef.current.focus();
          }
        } else {
          if (e.keyCode === KEY_CODES.LEFT && index === 0) {
            e.preventDefault();
          }
          if (e.keyCode === KEY_CODES.RIGHT && index === selectedItems.length - 1) {
            e.preventDefault();
            inputRef.current && inputRef.current.focus();
          }
        }
      },
      onClick: function onClick(e) {
        e.nativeEvent.preventDownshiftDefault = true;
      },
      tabIndex: -1
    })), {}, {
      size: props.isCompact ? 'medium' : 'large'
    }));
    var key = "".concat(itemToString(item), "-").concat(index);
    return React.createElement(StyledMultiselectItemWrapper, {
      key: key
    }, clonedChild);
  }, [getItemProps, inputValue, renderItem, setDownshiftState, itemToString, selectedItems, props, inputRef]);
  var items = useMemo(function () {
    var itemValues = selectedItems || [];
    var output = [];
    for (var x = 0; x < itemValues.length; x++) {
      var item = itemValues[x];
      if (x < maxItems) {
        if (props.disabled) {
          var renderedItem = React.cloneElement(renderItem({
            value: item,
            removeValue: function removeValue() {
              return undefined;
            }
          }), {
            size: props.isCompact ? 'medium' : 'large'
          });
          output.push( React.createElement(StyledMultiselectItemWrapper, {
            key: x
          }, renderedItem));
        } else {
          output.push(renderSelectableItem(item, x));
        }
      } else if (!isFocused && !inputValue || props.disabled) {
        output.push( React.createElement(StyledMultiselectItemWrapper, {
          key: "more-anchor"
        }, React.createElement(StyledMultiselectMoreAnchor, {
          isCompact: props.isCompact,
          isDisabled: props.disabled,
          onMouseDown: function onMouseDown(e) {
            e.preventDefault();
          }
        }, renderShowMore ? renderShowMore(itemValues.length - x) : "+ ".concat(itemValues.length - x, " more"))));
        break;
      } else {
        output.push(renderSelectableItem(item, x));
      }
    }
    return output;
  }, [isFocused, props.disabled, renderSelectableItem, selectedItems, renderItem, inputValue, maxItems, renderShowMore, props.isCompact]);
  var isContainerHovered = isLabelHovered && !isOpen;
  var isContainerFocused = isOpen || isFocused;
  return React.createElement(Reference, null, function (_ref2) {
    var popperReference = _ref2.ref;
    return React.createElement(StyledFauxInput, getContainerProps(_objectSpread2(_objectSpread2({}, selectProps), {}, {
      isHovered: isContainerHovered,
      isFocused: isContainerFocused,
      ref: function ref(selectRef) {
        popperReference(selectRef);
        triggerRef.current = selectRef;
      }
    })), start && React.createElement(StyledFauxInput.StartIcon, {
      isDisabled: props.disabled
    }, start), React.createElement(StyledMultiselectItemsContainer, {
      isBare: props.isBare,
      isCompact: props.isCompact
    }, items, React.createElement(StyledMultiselectInput, getInputProps({
      disabled: props.disabled,
      onFocus: function onFocus() {
        setFocusedItem(undefined);
      },
      onClick: function onClick(e) {
        if (inputValue && inputValue.length > 0 && isOpen) {
          e.nativeEvent.preventDownshiftDefault = true;
        }
      },
      onKeyDown: function onKeyDown(e) {
        if (!inputValue) {
          if (isRtl(props) && e.keyCode === KEY_CODES.RIGHT && selectedItems.length > 0 && previousIndexRef.current === undefined) {
            setFocusedItem(selectedItems[selectedItems.length - 1]);
          } else if (!isRtl(props) && e.keyCode === KEY_CODES.LEFT && selectedItems.length > 0 && previousIndexRef.current === undefined) {
            setFocusedItem(selectedItems[selectedItems.length - 1]);
          } else if (e.keyCode === KEY_CODES.BACKSPACE && selectedItems.length > 0) {
            setDownshiftState({
              type: REMOVE_ITEM_STATE_TYPE,
              selectedItem: selectedItems[selectedItems.length - 1]
            });
            e.nativeEvent.preventDownshiftDefault = true;
            e.preventDefault();
            e.stopPropagation();
          }
        }
      },
      isVisible: isFocused || inputValue || selectedItems.length === 0,
      isCompact: props.isCompact,
      role: 'combobox',
      ref: inputRef,
      placeholder: selectedItems.length === 0 ? placeholder : undefined
    }))), !props.isBare && React.createElement(StyledFauxInput.EndIcon, {
      isHovered: isHovered || isLabelHovered && !isOpen,
      isFocused: isOpen,
      isDisabled: props.disabled,
      isRotated: isOpen
    }, React.createElement(SvgChevronDownStroke, null)));
  });
});
Multiselect.propTypes = {
  isCompact: PropTypes.bool,
  isBare: PropTypes.bool,
  disabled: PropTypes.bool,
  focusInset: PropTypes.bool,
  isOpen: PropTypes.bool,
  renderItem: PropTypes.func.isRequired,
  maxItems: PropTypes.number,
  validation: PropTypes.oneOf(['success', 'warning', 'error'])
};
Multiselect.defaultProps = {
  maxItems: 4
};
var Multiselect$1 = withTheme(Multiselect);

var Select = React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      start = _ref.start,
      props = _objectWithoutProperties(_ref, ["children", "start"]);
  var _useDropdownContext = useDropdownContext(),
      popperReferenceElementRef = _useDropdownContext.popperReferenceElementRef,
      itemSearchRegistry = _useDropdownContext.itemSearchRegistry,
      _useDropdownContext$d = _useDropdownContext.downshift,
      getToggleButtonProps = _useDropdownContext$d.getToggleButtonProps,
      getInputProps = _useDropdownContext$d.getInputProps,
      isOpen = _useDropdownContext$d.isOpen,
      highlightedIndex = _useDropdownContext$d.highlightedIndex,
      setHighlightedIndex = _useDropdownContext$d.setHighlightedIndex,
      selectItemAtIndex = _useDropdownContext$d.selectItemAtIndex,
      closeMenu = _useDropdownContext$d.closeMenu;
  var _useFieldContext = useFieldContext(),
      isLabelHovered = _useFieldContext.isLabelHovered;
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isHovered = _useState2[0],
      setIsHovered = _useState2[1];
  var hiddenInputRef = useRef(null);
  var triggerRef = useCombinedRefs(ref, popperReferenceElementRef);
  var previousIsOpenRef = useRef(undefined);
  var _useState3 = useState(''),
      _useState4 = _slicedToArray(_useState3, 2),
      searchString = _useState4[0],
      setSearchString = _useState4[1];
  var searchTimeoutRef = useRef();
  var currentSearchIndexRef = useRef(0);
  useEffect(function () {
    if (hiddenInputRef.current && isOpen && !previousIsOpenRef.current) {
      hiddenInputRef.current.focus();
    }
    if (triggerRef.current && !isOpen && previousIsOpenRef.current) {
      triggerRef.current.focus();
    }
    previousIsOpenRef.current = isOpen;
  }, [isOpen, triggerRef]);
  useEffect(function () {
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
    searchTimeoutRef.current = window.setTimeout(function () {
      setSearchString('');
    }, 500);
    return function () {
      clearTimeout(searchTimeoutRef.current);
    };
  }, [searchString]);
  var searchItems = useCallback(function (searchValue, startIndex, endIndex) {
    for (var index = startIndex; index < endIndex; index++) {
      var itemTextValue = itemSearchRegistry.current[index];
      if (itemTextValue && itemTextValue.toUpperCase().indexOf(searchValue.toUpperCase()) === 0) {
        return index;
      }
    }
    return undefined;
  }, [itemSearchRegistry]);
  var onInputKeyDown = useCallback(function (e) {
    if (e.keyCode === KEY_CODES.SPACE) {
      if (searchString) {
        e.preventDefault();
        e.stopPropagation();
      } else if (highlightedIndex !== null && highlightedIndex !== undefined) {
        e.preventDefault();
        e.stopPropagation();
        selectItemAtIndex(highlightedIndex);
        closeMenu();
      }
    }
    if ((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 65 || e.keyCode > 90) && e.keyCode !== KEY_CODES.SPACE) {
      return;
    }
    var character = String.fromCharCode(e.which || e.keyCode);
    if (!character || character.length === 0) {
      return;
    }
    if (!searchString) {
      if (highlightedIndex === null || highlightedIndex === undefined) {
        currentSearchIndexRef.current = -1;
      } else {
        currentSearchIndexRef.current = highlightedIndex;
      }
    }
    var newSearchString = searchString + character;
    setSearchString(newSearchString);
    var matchingIndex = searchItems(newSearchString, currentSearchIndexRef.current + 1, itemSearchRegistry.current.length);
    if (matchingIndex === undefined) {
      matchingIndex = searchItems(newSearchString, 0, currentSearchIndexRef.current);
    }
    if (matchingIndex !== undefined) {
      setHighlightedIndex(matchingIndex);
    }
  }, [searchString, searchItems, itemSearchRegistry, highlightedIndex, selectItemAtIndex, closeMenu, setHighlightedIndex]);
  var _getToggleButtonProps = getToggleButtonProps(_objectSpread2({
    tabIndex: props.disabled ? undefined : 0,
    onMouseEnter: composeEventHandlers(props.onMouseEnter, function () {
      return setIsHovered(true);
    }),
    onMouseLeave: composeEventHandlers(props.onMouseLeave, function () {
      return setIsHovered(false);
    })
  }, props));
      _getToggleButtonProps.type;
      var selectProps = _objectWithoutProperties(_getToggleButtonProps, ["type"]);
  var isContainerHovered = isLabelHovered && !isOpen;
  return React.createElement(Reference, null, function (_ref2) {
    var popperReference = _ref2.ref;
    return React.createElement(StyledFauxInput, _extends({
      isHovered: isContainerHovered,
      isFocused: isOpen
    }, selectProps, {
      ref: function ref(selectRef) {
        popperReference(selectRef);
        triggerRef.current = selectRef;
        popperReferenceElementRef.current = selectRef;
      }
    }), start && React.createElement(StyledFauxInput.StartIcon, {
      isDisabled: props.disabled
    }, start), React.createElement(StyledSelect, null, children), React.createElement(StyledInput, getInputProps({
      readOnly: true,
      isHidden: true,
      tabIndex: -1,
      ref: hiddenInputRef,
      value: '',
      onClick: function onClick(e) {
        if (isOpen) {
          e.nativeEvent.preventDownshiftDefault = true;
        }
      },
      onKeyDown: onInputKeyDown
    })), !props.isBare && React.createElement(StyledFauxInput.EndIcon, {
      isHovered: isHovered || isLabelHovered && !isOpen,
      isFocused: isOpen,
      isDisabled: props.disabled,
      isRotated: isOpen
    }, React.createElement(SvgChevronDownStroke, null)));
  });
});
Select.displayName = 'Select';
Select.propTypes = {
  isCompact: PropTypes.bool,
  isBare: PropTypes.bool,
  disabled: PropTypes.bool,
  focusInset: PropTypes.bool,
  isOpen: PropTypes.bool,
  validation: PropTypes.oneOf(['success', 'warning', 'error'])
};

var Field = function Field(props) {
  var _useDropdownContext = useDropdownContext(),
      getRootProps = _useDropdownContext.downshift.getRootProps;
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isLabelHovered = _useState2[0],
      setIsLabelHovered = _useState2[1];
  var _getRootProps = getRootProps(),
      ref = _getRootProps.ref;
  return React.createElement(FieldContext.Provider, {
    value: {
      isLabelHovered: isLabelHovered,
      setIsLabelHovered: setIsLabelHovered
    }
  }, React.createElement(Field$1, _extends({
    ref: ref
  }, props)));
};

var Hint = React.forwardRef(function (props, ref) {
  return React.createElement(Hint$1, _extends({
    ref: ref
  }, props));
});
Hint.displayName = 'Hint';

var Label = React.forwardRef(function (_ref, ref) {
  var onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      other = _objectWithoutProperties(_ref, ["onMouseEnter", "onMouseLeave"]);
  var _useDropdownContext = useDropdownContext(),
      getLabelProps = _useDropdownContext.downshift.getLabelProps;
  var _useFieldContext = useFieldContext(),
      setIsLabelHovered = _useFieldContext.setIsLabelHovered;
  var labelProps = getLabelProps(_objectSpread2({
    onMouseEnter: composeEventHandlers(onMouseEnter, function () {
      setIsLabelHovered(true);
    }),
    onMouseLeave: composeEventHandlers(onMouseLeave, function () {
      setIsLabelHovered(false);
    })
  }, other));
  return React.createElement(Label$1, _extends({
    ref: ref
  }, labelProps));
});
Label.displayName = 'Label';
Label.propTypes = {
  isRegular: PropTypes.bool
};

var Message = React.forwardRef(function (props, ref) {
  return React.createElement(Message$1, _extends({
    ref: ref
  }, props));
});
Message.displayName = 'Message';
Message.propTypes = {
  validation: PropTypes.oneOf(['success', 'warning', 'error'])
};

var MenuContext = React.createContext(undefined);
var useMenuContext = function useMenuContext() {
  var menuContext = useContext(MenuContext);
  if (!menuContext) {
    throw new Error('This component must be rendered within a `Menu` component.');
  }
  return menuContext;
};

var Menu = function Menu(props) {
  var placement = props.placement,
      popperModifiers = props.popperModifiers,
      eventsEnabled = props.eventsEnabled,
      isAnimated = props.isAnimated,
      maxHeight = props.maxHeight,
      menuStyle = props.style,
      zIndex = props.zIndex,
      isCompact = props.isCompact,
      children = props.children,
      otherProps = _objectWithoutProperties(props, ["placement", "popperModifiers", "eventsEnabled", "isAnimated", "maxHeight", "style", "zIndex", "isCompact", "children"]);
  var _useDropdownContext = useDropdownContext(),
      hasMenuRef = _useDropdownContext.hasMenuRef,
      itemIndexRef = _useDropdownContext.itemIndexRef,
      previousIndexRef = _useDropdownContext.previousIndexRef,
      nextItemsHashRef = _useDropdownContext.nextItemsHashRef,
      popperReferenceElementRef = _useDropdownContext.popperReferenceElementRef,
      itemSearchRegistry = _useDropdownContext.itemSearchRegistry,
      _useDropdownContext$d = _useDropdownContext.downshift,
      isOpen = _useDropdownContext$d.isOpen,
      getMenuProps = _useDropdownContext$d.getMenuProps;
  var scheduleUpdateRef = useRef(undefined);
  useEffect(function () {
    if (scheduleUpdateRef.current && isOpen) {
      scheduleUpdateRef.current();
    }
  });
  var _useState = useState(isOpen),
      _useState2 = _slicedToArray(_useState, 2),
      isVisible = _useState2[0],
      setVisible = _useState2[1];
  useEffect(function () {
    var timeout;
    if (isOpen) {
      setVisible(true);
    } else if (isAnimated) {
      timeout = setTimeout(function () {
        return setVisible(false);
      }, 200);
    } else {
      setVisible(false);
    }
    return function () {
      return clearTimeout(timeout);
    };
  }, [isOpen, isAnimated]);
  itemIndexRef.current = 0;
  nextItemsHashRef.current = {};
  previousIndexRef.current = undefined;
  itemSearchRegistry.current = [];
  var popperPlacement = isRtl(props) ? getRtlPopperPlacement(placement) : getPopperPlacement(placement);
  return React.createElement(MenuContext.Provider, {
    value: {
      itemIndexRef: itemIndexRef,
      isCompact: isCompact
    }
  }, React.createElement(Popper, {
    placement: popperPlacement,
    modifiers: popperModifiers
    ,
    eventsEnabled: isOpen && eventsEnabled
  }, function (_ref) {
    var ref = _ref.ref,
        style = _ref.style,
        scheduleUpdate = _ref.scheduleUpdate,
        currentPlacement = _ref.placement;
    var computedStyle = menuStyle;
    scheduleUpdateRef.current = scheduleUpdate;
    if (popperReferenceElementRef.current && popperReferenceElementRef.current.getBoundingClientRect) {
      computedStyle = _objectSpread2({
        width: popperReferenceElementRef.current.getBoundingClientRect().width
      }, menuStyle);
    }
    var menuProps = getMenuProps(_objectSpread2({
      role: hasMenuRef.current ? 'menu' : 'listbox',
      placement: currentPlacement,
      isAnimated: isAnimated && (isOpen || isVisible)
    }, otherProps));
    return React.createElement(StyledMenuWrapper, {
      ref: isOpen ? ref : undefined,
      hasArrow: menuProps.hasArrow,
      placement: menuProps.placement,
      style: style,
      isHidden: !isOpen,
      isAnimated: menuProps.isAnimated,
      zIndex: zIndex
    }, React.createElement(StyledMenu, _extends({
      isCompact: isCompact,
      maxHeight: maxHeight,
      style: computedStyle
    }, menuProps), (isOpen || isVisible) && children));
  }));
};
Menu.propTypes = {
  popperModifiers: PropTypes.any,
  eventsEnabled: PropTypes.bool,
  zIndex: PropTypes.number,
  style: PropTypes.object,
  placement: PropTypes.oneOf(['auto', 'top', 'top-start', 'top-end', 'end', 'end-top', 'end-bottom', 'bottom', 'bottom-start', 'bottom-end', 'start', 'start-top', 'start-bottom']),
  isAnimated: PropTypes.bool,
  isCompact: PropTypes.bool,
  hasArrow: PropTypes.bool,
  maxHeight: PropTypes.string
};
Menu.defaultProps = {
  placement: 'bottom-start',
  isAnimated: true,
  eventsEnabled: true,
  maxHeight: '400px',
  zIndex: 1000
};
var Menu$1 = withTheme(Menu);

var Separator = React.forwardRef(function (props, ref) {
  return React.createElement(StyledSeparator, _extends({
    ref: ref
  }, props));
});
Separator.displayName = 'Separator';

function _extends$4() { _extends$4 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$4.apply(this, arguments); }

var _ref$3 = /*#__PURE__*/createElement("path", {
  stroke: "currentColor",
  strokeLinecap: "round",
  d: "M7.5 2.5v12m6-6h-12"
});

function SvgPlusStroke(props) {
  return /*#__PURE__*/createElement("svg", _extends$4({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$3);
}

function _extends$5() { _extends$5 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$5.apply(this, arguments); }

var _ref$4 = /*#__PURE__*/createElement("path", {
  fill: "none",
  stroke: "currentColor",
  strokeLinecap: "round",
  strokeLinejoin: "round",
  d: "M1 9l4 4L15 3"
});

function SvgCheckLgStroke(props) {
  return /*#__PURE__*/createElement("svg", _extends$5({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$4);
}

var ItemContext = React.createContext(undefined);
var useItemContext = function useItemContext() {
  var context = useContext(ItemContext);
  if (!context) {
    throw new Error('This component must be rendered within an `Item` component.');
  }
  return context;
};

var Item = React.forwardRef(function (_ref, forwardRef) {
  var value = _ref.value,
      disabled = _ref.disabled,
      _ref$component = _ref.component,
      component = _ref$component === void 0 ? StyledItem : _ref$component,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["value", "disabled", "component", "children"]);
  var _useDropdownContext = useDropdownContext(),
      selectedItems = _useDropdownContext.selectedItems,
      hasMenuRef = _useDropdownContext.hasMenuRef,
      itemSearchRegistry = _useDropdownContext.itemSearchRegistry,
      _useDropdownContext$d = _useDropdownContext.downshift,
      isOpen = _useDropdownContext$d.isOpen,
      selectedItem = _useDropdownContext$d.selectedItem,
      highlightedIndex = _useDropdownContext$d.highlightedIndex,
      getItemProps = _useDropdownContext$d.getItemProps,
      setHighlightedIndex = _useDropdownContext$d.setHighlightedIndex,
      itemToString = _useDropdownContext$d.itemToString;
  var _useMenuContext = useMenuContext(),
      itemIndexRef = _useMenuContext.itemIndexRef,
      isCompact = _useMenuContext.isCompact;
  var itemRef = useCombinedRefs(forwardRef);
  var Component = component;
  if ((value === undefined || value === null) && !disabled) {
    throw new Error('All Item components require a `value` prop');
  }
  var currentIndex = itemIndexRef.current;
  var isFocused = highlightedIndex === currentIndex;
  var isSelected;
  useEffect(function () {
    if (!disabled && itemRef.current) {
      var itemTextValue = itemRef.current.innerText;
      if (itemTextValue) {
        itemSearchRegistry.current[currentIndex] = itemTextValue;
      }
    }
  });
  if (value) {
    if (selectedItems) {
      isSelected = selectedItems.some(function (item) {
        return itemToString(item) === itemToString(value);
      });
    } else {
      isSelected = itemToString(selectedItem) === itemToString(value);
    }
  } else {
    isSelected = false;
  }
  useEffect(function () {
    if (isOpen && !disabled && !selectedItems && isSelected) {
      setHighlightedIndex(currentIndex);
    }
  }, [currentIndex, disabled, isOpen, isSelected, selectedItems, setHighlightedIndex]);
  if (disabled) {
    return React.createElement(ItemContext.Provider, {
      value: {
        isDisabled: disabled
      }
    }, React.createElement(Component, _extends({
      ref: itemRef,
      disabled: disabled,
      isCompact: isCompact
    }, props), isSelected && React.createElement(StyledItemIcon, {
      isCompact: isCompact,
      isVisible: isSelected,
      isDisabled: disabled
    }, React.createElement(SvgCheckLgStroke, null)), children));
  }
  itemIndexRef.current++;
  return React.createElement(ItemContext.Provider, {
    value: {
      isDisabled: disabled
    }
  }, React.createElement(Component, getItemProps(_objectSpread2(_objectSpread2({
    item: value,
    isFocused: isFocused,
    ref: itemRef,
    isCompact: isCompact
  }, hasMenuRef.current && {
    role: 'menuitem',
    'aria-selected': null
  }), props)), isSelected && React.createElement(StyledItemIcon, {
    isCompact: isCompact,
    isVisible: isSelected
  }, React.createElement(SvgCheckLgStroke, null)), children));
});
Item.displayName = 'Item';
Item.propTypes = {
  value: PropTypes.any,
  disabled: PropTypes.bool
};

var AddItemComponent = React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, ["children", "disabled"]);
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React.createElement(StyledAddItem, _extends({
    ref: ref,
    disabled: disabled
  }, props), React.createElement(StyledItemIcon, {
    isCompact: isCompact,
    isVisible: true,
    isDisabled: disabled
  }, React.createElement(SvgPlusStroke, null)), children);
});
AddItemComponent.displayName = 'AddItemComponent';
var AddItem = React.forwardRef(function (props, ref) {
  return React.createElement(Item, _extends({
    component: AddItemComponent,
    ref: ref
  }, props));
});
AddItem.displayName = 'AddItem';
AddItem.propTypes = {
  value: PropTypes.any,
  disabled: PropTypes.bool
};

var HeaderIcon = React.forwardRef(function (props, ref) {
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React.createElement(StyledHeaderIcon, _extends({
    ref: ref,
    isCompact: isCompact
  }, props));
});
HeaderIcon.displayName = 'HeaderIcon';

var HeaderItem = React.forwardRef(function (props, ref) {
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React.createElement(StyledHeaderItem, _extends({
    ref: ref,
    isCompact: isCompact
  }, props));
});
HeaderItem.displayName = 'HeaderItem';

var ItemMeta = React.forwardRef(function (props, ref) {
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  var _useItemContext = useItemContext(),
      isDisabled = _useItemContext.isDisabled;
  return React.createElement(StyledItemMeta, _extends({
    ref: ref,
    isCompact: isCompact,
    isDisabled: isDisabled
  }, props));
});
ItemMeta.displayName = 'ItemMeta';

var MediaBody = React.forwardRef(function (props, ref) {
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React.createElement(StyledMediaBody, _extends({
    ref: ref,
    isCompact: isCompact
  }, props));
});
MediaBody.displayName = 'MediaBody';

var MediaFigure = function MediaFigure(props) {
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React.createElement(StyledMediaFigure, _extends({
    isCompact: isCompact
  }, props));
};

var MediaItem = React.forwardRef(function (props, ref) {
  return React.createElement(Item, _extends({
    component: StyledMediaItem,
    ref: ref
  }, props));
});
MediaItem.displayName = 'MediaItem';
MediaItem.propTypes = {
  value: PropTypes.any,
  disabled: PropTypes.bool
};

var NextItemComponent = React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, ["children", "disabled"]);
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React.createElement(StyledNextItem, _extends({
    ref: ref,
    disabled: disabled
  }, props), React.createElement(StyledItemIcon, {
    isCompact: isCompact,
    isDisabled: disabled,
    isVisible: true
  }, React.createElement(StyledNextIcon, {
    isDisabled: disabled
  })), children);
});
NextItemComponent.displayName = 'NextItemComponent';
var NextItem = React.forwardRef(function (_ref2, ref) {
  var value = _ref2.value,
      disabled = _ref2.disabled,
      props = _objectWithoutProperties(_ref2, ["value", "disabled"]);
  var _useDropdownContext = useDropdownContext(),
      nextItemsHashRef = _useDropdownContext.nextItemsHashRef,
      itemToString = _useDropdownContext.downshift.itemToString;
  var _useMenuContext2 = useMenuContext(),
      itemIndexRef = _useMenuContext2.itemIndexRef;
  if (!disabled) {
    nextItemsHashRef.current[itemToString(value)] = itemIndexRef.current;
  }
  return React.createElement(Item, _extends({
    component: NextItemComponent,
    "aria-expanded": true,
    disabled: disabled,
    value: value,
    ref: ref
  }, props));
});
NextItem.displayName = 'NextItem';
NextItem.propTypes = {
  value: PropTypes.any,
  disabled: PropTypes.bool
};

var PreviousItemComponent = React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, ["children", "disabled"]);
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React.createElement(StyledPreviousItem, _extends({
    ref: ref,
    disabled: disabled
  }, props), React.createElement(StyledItemIcon, {
    isCompact: isCompact,
    isDisabled: disabled,
    isVisible: true
  }, React.createElement(StyledPreviousIcon, {
    isDisabled: disabled
  })), children);
});
PreviousItemComponent.displayName = 'PreviousItemComponent';
var PreviousItem = React.forwardRef(function (_ref2, ref) {
  var value = _ref2.value,
      disabled = _ref2.disabled,
      props = _objectWithoutProperties(_ref2, ["value", "disabled"]);
  var _useDropdownContext = useDropdownContext(),
      previousIndexRef = _useDropdownContext.previousIndexRef;
  var _useMenuContext2 = useMenuContext(),
      itemIndexRef = _useMenuContext2.itemIndexRef;
  if (!disabled) {
    previousIndexRef.current = itemIndexRef.current;
  }
  return React.createElement(Item, _extends({
    component: PreviousItemComponent,
    "aria-expanded": true,
    value: value,
    disabled: disabled
  }, props, {
    ref: ref
  }));
});
PreviousItem.displayName = 'PreviousItem';
PreviousItem.propTypes = {
  value: PropTypes.any,
  disabled: PropTypes.bool
};

export { AddItem, Autocomplete, Dropdown$1 as Dropdown, Field, HeaderIcon, HeaderItem, Hint, Item, ItemMeta, Label, MediaBody, MediaFigure, MediaItem, Menu$1 as Menu, Message, Multiselect$1 as Multiselect, NextItem, PreviousItem, Select, Separator, Trigger };
