/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

import React, { createElement, createContext, useContext, useRef, useEffect, useMemo, useState, forwardRef } from 'react';
import ReactDOM, { createPortal } from 'react-dom';
import styled, { keyframes, css, ThemeContext } from 'styled-components';
import PropTypes from 'prop-types';
import { getColor, retrieveComponentStyles, DEFAULT_THEME, getLineHeight, menuStyles, arrowStyles, useDocument } from '@zendeskgarden/react-theming';
import { useModal } from '@zendeskgarden/container-modal';
import { useFocusVisible } from '@zendeskgarden/container-focusvisible';
import mergeRefs from 'react-merge-refs';
import { usePopper } from 'react-popper';
import { useCombinedRefs } from '@zendeskgarden/container-utilities';
import { CSSTransition } from 'react-transition-group';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function isDocument(element) {
  return 'nodeType' in element && element.nodeType === document.DOCUMENT_NODE;
}

function isWindow(node) {
  if ('window' in node && node.window === node) return node;
  if (isDocument(node)) return node.defaultView || false;
  return false;
}

function ownerDocument(node) {
  return node && node.ownerDocument || document;
}

function ownerWindow(node) {
  var doc = ownerDocument(node);
  return doc && doc.defaultView || window;
}

function getComputedStyle(node, psuedoElement) {
  return ownerWindow(node).getComputedStyle(node, psuedoElement);
}

var rUpper = /([A-Z])/g;
function hyphenate(string) {
  return string.replace(rUpper, '-$1').toLowerCase();
}

var msPattern = /^ms-/;
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
function isTransform(value) {
  return !!(value && supportedTransforms.test(value));
}

function style(node, property) {
  var css = '';
  var transforms = '';
  if (typeof property === 'string') {
    return node.style.getPropertyValue(hyphenateStyleName(property)) || getComputedStyle(node).getPropertyValue(hyphenateStyleName(property));
  }
  Object.keys(property).forEach(function (key) {
    var value = property[key];
    if (!value && value !== 0) {
      node.style.removeProperty(hyphenateStyleName(key));
    } else if (isTransform(key)) {
      transforms += key + "(" + value + ") ";
    } else {
      css += hyphenateStyleName(key) + ": " + value + ";";
    }
  });
  if (transforms) {
    css += "transform: " + transforms + ";";
  }
  node.style.cssText += ";" + css;
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var size;
function scrollbarSize(recalc) {
  if (!size && size !== 0 || recalc) {
    if (canUseDOM) {
      var scrollDiv = document.createElement('div');
      scrollDiv.style.position = 'absolute';
      scrollDiv.style.top = '-9999px';
      scrollDiv.style.width = '50px';
      scrollDiv.style.height = '50px';
      scrollDiv.style.overflow = 'scroll';
      document.body.appendChild(scrollDiv);
      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
  }
  return size;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  align-items: ", ";\n  justify-content: ", ";\n  z-index: 400;\n  background-color: ", ";\n  overflow: auto;\n  -webkit-overflow-scrolling: touch; /* [1] */\n  font-family: ", ";\n  direction: ", ";\n  animation: ", ";\n\n  ", ";\n"]);
  _templateObject = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID = 'modals.backdrop';
var animationName = keyframes(["0%{opacity:0;}100%{opacity:1;}"]);
var StyledBackdrop = styled.div.attrs({
  'data-garden-id': COMPONENT_ID,
  'data-garden-version': '8.32.0'
})(_templateObject(), function (props) {
  return props.isCentered && 'center';
}, function (props) {
  return props.isCentered && 'center';
}, function (props) {
  return getColor('neutralHue', 800, props.theme, 0.85);
}, function (props) {
  return props.theme.fonts.system;
}, function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return props.isAnimated && css(["", " 0.15s ease-in"], animationName);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID, props);
});
StyledBackdrop.defaultProps = {
  theme: DEFAULT_THEME
};
StyledBackdrop.propTypes = {
  isCentered: PropTypes.bool,
  isAnimated: PropTypes.bool
};

function _templateObject$1() {
  var data = _taggedTemplateLiteral(["\n  display: block;\n  margin: 0;\n  padding: ", ";\n  height: 100%;\n  overflow: auto;\n  line-height: ", ";\n  color: ", ";\n  font-size: ", ";\n  ", ";\n"]);
  _templateObject$1 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$1 = 'modals.body';
var StyledBody = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$1,
  'data-garden-version': '8.32.0'
})(_templateObject$1(), function (props) {
  return "".concat(props.theme.space.base * 5, "px ").concat(props.theme.space.base * 10, "px");
}, function (props) {
  return getLineHeight(props.theme.lineHeights.md, props.theme.fontSizes.md);
}, function (props) {
  return props.theme.colors.foreground;
}, function (props) {
  return props.theme.fontSizes.md;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$1, props);
});
StyledBody.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$2() {
  var data = _taggedTemplateLiteral(["\n  display: block;\n  position: absolute;\n  top: ", "px;\n  ", ": ", ";\n  /* prettier-ignore */\n  transition:\n    box-shadow 0.1s ease-in-out,\n    background-color 0.25s ease-in-out,\n    color 0.25s ease-in-out;\n  border: none;\n  border-radius: 50%;\n  background-color: transparent;\n  cursor: pointer;\n  padding: 0;\n  width: ", "px;\n  height: ", "px;\n  overflow: hidden;\n  text-decoration: none;\n  font-size: 0;\n  user-select: none;\n\n  &::-moz-focus-inner {\n    border: 0; /* [1] */\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  ", "\n\n  & > svg {\n    vertical-align: middle;\n  }\n\n  ", ";\n"]);
  _templateObject$2 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$2 = 'modals.close';
var colorStyles = function colorStyles(props) {
  var backgroundColor = 'primaryHue';
  var foregroundColor = 'neutralHue';
  return css(["background-color:transparent;color:", ";&:hover{background-color:", ";color:", ";}&[data-garden-focus-visible]{box-shadow:", ";}&:active{transition:background-color 0.1s ease-in-out,color 0.1s ease-in-out;background-color:", ";color:", ";}"], getColor(foregroundColor, 600, props.theme), getColor(backgroundColor, 600, props.theme, 0.08), getColor(foregroundColor, 700, props.theme), props.theme.shadows.md(getColor(backgroundColor, 600, props.theme, 0.35)), getColor(backgroundColor, 600, props.theme, 0.2), getColor(foregroundColor, 800, props.theme));
};
var StyledClose = styled.button.attrs({
  'data-garden-id': COMPONENT_ID$2,
  'data-garden-version': '8.32.0'
})(_templateObject$2(), function (props) {
  return props.theme.space.base * 2.5;
}, function (props) {
  return props.theme.rtl ? 'left' : 'right';
}, function (props) {
  return "".concat(props.theme.space.base * 6.5, "px");
}, function (props) {
  return props.theme.space.base * 10;
}, function (props) {
  return props.theme.space.base * 10;
}, function (props) {
  return colorStyles(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$2, props);
});
StyledClose.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$3() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: flex-end;\n  border-top: ", ";\n  padding: ", ";\n\n  ", ";\n"]);
  _templateObject$3 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$3 = 'modals.footer';
var StyledFooter = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$3,
  'data-garden-version': '8.32.0'
})(_templateObject$3(), function (props) {
  return props.isLarge && "".concat(props.theme.borders.sm, " ").concat(getColor('neutralHue', 200, props.theme));
}, function (props) {
  return props.isLarge ? "".concat(props.theme.space.base * 8, "px ").concat(props.theme.space.base * 10, "px") : "".concat(props.theme.space.base * 5, "px ").concat(props.theme.space.base * 10, "px ").concat(props.theme.space.base * 8, "px");
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$3, props);
});
StyledFooter.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$4() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  /* stylelint-disable property-no-unknown */\n  margin-", ": ", "px;\n  /* stylelint-enable property-no-unknown */\n  min-width: 0;\n\n  &:first-child {\n    /* stylelint-disable property-no-unknown */\n    margin-", ": 0;\n    /* stylelint-enable property-no-unknown */\n  }\n\n  ", ";\n"]);
  _templateObject$4 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$4 = 'modals.footer_item';
var StyledFooterItem = styled.span.attrs({
  'data-garden-id': COMPONENT_ID$4,
  'data-garden-version': '8.32.0'
})(_templateObject$4(), function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return props.theme.space.base * 5;
}, function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$4, props);
});
StyledFooterItem.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$5() {
  var data = _taggedTemplateLiteral(["\n  display: block;\n  position: ", ";\n  margin: 0;\n  border-bottom: ", " ", ";\n  padding: ", ";\n  line-height: ", ";\n  color: ", ";\n  font-size: ", ";\n  font-weight: ", ";\n\n  ", ";\n"]);
  _templateObject$5 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$5 = 'modals.header';
var StyledHeader = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$5,
  'data-garden-version': '8.32.0'
})(_templateObject$5(), function (props) {
  return props.isDanger && 'relative';
}, function (props) {
  return props.theme.borders.sm;
}, getColor('neutralHue', 200), function (props) {
  return "".concat(props.theme.space.base * 5, "px ").concat(props.theme.space.base * 10, "px");
}, function (props) {
  return getLineHeight(props.theme.lineHeights.md, props.theme.fontSizes.md);
}, function (props) {
  return props.isDanger ? getColor('dangerHue', 600, props.theme) : props.theme.colors.foreground;
}, function (props) {
  return props.theme.fontSizes.md;
}, function (props) {
  return props.theme.fontWeights.semibold;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$5, props);
});
StyledHeader.defaultProps = {
  theme: DEFAULT_THEME
};

function _extends$1() { _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }

var _ref = /*#__PURE__*/createElement("g", {
  fill: "none",
  stroke: "currentColor"
}, /*#__PURE__*/createElement("circle", {
  cx: 7.5,
  cy: 8.5,
  r: 7
}), /*#__PURE__*/createElement("path", {
  strokeLinecap: "round",
  d: "M7.5 4.5V9"
}));

var _ref2 = /*#__PURE__*/createElement("circle", {
  cx: 7.5,
  cy: 12,
  r: 1,
  fill: "currentColor"
});

function SvgAlertErrorStroke(props) {
  return /*#__PURE__*/createElement("svg", _extends$1({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref, _ref2);
}

function _templateObject$6() {
  var data = _taggedTemplateLiteral(["\n  position: absolute;\n  top: ", "px;\n  ", ": ", ";\n"]);
  _templateObject$6 = function _templateObject() {
    return data;
  };
  return data;
}
var StyledDangerIcon = styled(SvgAlertErrorStroke)(_templateObject$6(), function (props) {
  return props.theme.space.base * 5.5;
}, function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return "".concat(props.theme.space.base * 4, "px");
});
StyledDangerIcon.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$7() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  position: fixed;\n  flex-direction: column;\n  margin: ", ";\n  border-radius: ", ";\n  box-shadow: ", ";\n  background-color: ", ";\n  min-height: 60px;\n  max-height: calc(100vh - ", "px);\n  animation: ", ";\n  animation-delay: 0.01s;\n  overflow: auto;\n  direction: ", ";\n  ", "\n\n  &:focus {\n    outline: none;\n  }\n\n  /* stylelint-disable-next-line */\n  @media (max-height: 399px) {\n    top: ", "px;\n    bottom: auto;\n    margin-bottom: ", "px;\n    max-height: none;\n  }\n\n  /* stylelint-disable-next-line */\n  @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n    right: ", "; /* [1] */\n    bottom: ", "; /* [1] */\n    transform: ", "; /* [1] */\n  }\n\n  ", ";\n"]);
  _templateObject$7 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$6 = 'modals.modal';
var animationName$1 = keyframes(["0%{transform:scale(0);opacity:0;}50%{transform:scale(1.05);}100%{opacity:1;}"]);
var boxShadow = function boxShadow(props) {
  var theme = props.theme;
  var space = theme.space,
      shadows = theme.shadows;
  var offsetY = "".concat(space.base * 5, "px");
  var blurRadius = "".concat(space.base * 7, "px");
  var color = getColor('neutralHue', 800, theme, 0.35);
  return shadows.lg(offsetY, blurRadius, color);
};
var sizeStyles = function sizeStyles(props) {
  var defaultWidth = 544;
  var largeWidth = 800;
  return css(["width:", ";@media (max-width:", "){", ":", "px;}"], props.isLarge ? "".concat(largeWidth, "px") : "".concat(defaultWidth, "px"), props.isLarge ? "".concat(largeWidth - 1, "px") : props.theme.breakpoints.md, props.theme.rtl ? 'right' : 'left', props.theme.space.base * 6);
};
var StyledModal = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$6,
  'data-garden-version': '8.32.0'
})(_templateObject$7(), function (props) {
  return props.isCentered ? '0' : "".concat(props.theme.space.base * 12, "px");
}, function (props) {
  return props.theme.borderRadii.md;
}, boxShadow, function (props) {
  return props.theme.colors.background;
}, function (props) {
  return props.theme.space.base * 24;
}, function (props) {
  return props.isAnimated && css(["", " 0.3s ease-in-out"], animationName$1);
}, function (props) {
  return props.theme.rtl && 'rtl';
}, sizeStyles, function (props) {
  return props.theme.space.base * 6;
}, function (props) {
  return props.theme.space.base * 6;
}, function (props) {
  return props.isCentered && '50%';
}, function (props) {
  return props.isCentered && '50%';
}, function (props) {
  return props.isCentered && 'translate(50%, 50%)';
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$6, props);
});
StyledModal.propTypes = {
  isLarge: PropTypes.bool,
  isAnimated: PropTypes.bool
};
StyledModal.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$8() {
  var data = _taggedTemplateLiteral(["\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 400;\n  overflow: hidden;\n  -webkit-overflow-scrolling: touch; /* [1] */\n  font-family: ", ";\n  direction: ", ";\n\n  ", ";\n"]);
  _templateObject$8 = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$7 = 'modals.tooltip_modal.backdrop';
var StyledTooltipModalBackdrop = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$7,
  'data-garden-version': '8.32.0'
})(_templateObject$8(), function (props) {
  return props.theme.fonts.system;
}, function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$7, props);
});
StyledTooltipModalBackdrop.defaultProps = {
  theme: DEFAULT_THEME
};

function getPopperPlacement(gardenPlacement) {
  var gardenToPopperMapping = {
    auto: 'auto',
    top: 'top',
    'top-start': 'top-start',
    'top-end': 'top-end',
    bottom: 'bottom',
    'bottom-start': 'bottom-start',
    'bottom-end': 'bottom-end',
    end: 'right',
    'end-top': 'right-start',
    'end-bottom': 'right-end',
    start: 'left',
    'start-top': 'left-start',
    'start-bottom': 'left-end'
  };
  return gardenToPopperMapping[gardenPlacement];
}
function getRtlPopperPlacement(gardenPlacement) {
  var rtlPlacementMappings = {
    left: 'right',
    'left-start': 'right-start',
    'left-end': 'right-end',
    'top-start': 'top-end',
    'top-end': 'top-start',
    right: 'left',
    'right-start': 'left-start',
    'right-end': 'left-end',
    'bottom-start': 'bottom-end',
    'bottom-end': 'bottom-start'
  };
  var popperPlacement = getPopperPlacement(gardenPlacement);
  return rtlPlacementMappings[popperPlacement] || popperPlacement;
}
function getArrowPosition(popperPlacement) {
  var arrowPositionMappings = {
    top: 'bottom',
    'top-start': 'bottom-left',
    'top-end': 'bottom-right',
    right: 'left',
    'right-start': 'left-top',
    'right-end': 'left-bottom',
    bottom: 'top',
    'bottom-start': 'top-left',
    'bottom-end': 'top-right',
    left: 'right',
    'left-start': 'right-top',
    'left-end': 'right-bottom'
  };
  return arrowPositionMappings[popperPlacement] || 'top';
}
function getMenuPosition(popperPlacement) {
  return popperPlacement ? popperPlacement.split('-')[0] : 'bottom';
}

function _templateObject$9() {
  var data = _taggedTemplateLiteral(["\n  ", ";\n"]);
  _templateObject$9 = function _templateObject() {
    return data;
  };
  return data;
}
var StyledTooltipWrapper = styled.div.attrs(function (props) {
  return {
    className: props.isAnimated && 'is-animated'
  };
})(_templateObject$9(), function (props) {
  return menuStyles(getMenuPosition(props.placement), {
    theme: props.theme,
    hidden: false,
    margin: '0',
    zIndex: props.zIndex,
    animationModifier: '.is-animated'
  });
});
StyledTooltipWrapper.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$a() {
  var data = _taggedTemplateLiteral(["\n  /* stylelint-disable-next-line declaration-no-important */\n  position: static !important; /* [1] */\n\n  padding: ", "px;\n  width: 400px;\n\n  ", ";\n\n  ", ";\n"]);
  _templateObject$a = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$8 = 'modals.tooltip_modal';
var StyledTooltipModal = styled.div.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$8,
    'data-garden-version': '8.32.0',
    className: props.isAnimated && 'is-animated'
  };
})(_templateObject$a(), function (props) {
  return props.theme.space.base * 5;
}, function (props) {
  return props.hasArrow && arrowStyles(getArrowPosition(props.placement), {
    size: "".concat(props.theme.space.base * 2.5, "px"),
    inset: "".concat(props.theme.space.base / 2, "px"),
    animationModifier: '.is-animated'
  });
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$8, props);
});
StyledTooltipModal.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$b() {
  var data = _taggedTemplateLiteral(["\n  margin: 0;\n  color: ", ";\n  font-weight: ", ";\n\n  ", ";\n\n  ", ";\n"]);
  _templateObject$b = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$9 = 'modals.tooltip_modal.title';
var sizeStyles$1 = function sizeStyles(props) {
  return "\n  /* stylelint-disable-next-line property-no-unknown */\n  padding-".concat(props.theme.rtl ? 'left' : 'right', ": ").concat(props.theme.space.base * 8, "px;\n  line-height: ").concat(getLineHeight(props.theme.lineHeights.md, props.theme.fontSizes.md), ";\n  font-size: ").concat(props.theme.fontSizes.md, ";\n");
};
var StyledTooltipModalTitle = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$9,
  'data-garden-version': '8.32.0'
})(_templateObject$b(), function (props) {
  return props.theme.colors.foreground;
}, function (props) {
  return props.theme.fontWeights.semibold;
}, function (props) {
  return sizeStyles$1(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$9, props);
});
StyledTooltipModalTitle.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$c() {
  var data = _taggedTemplateLiteral(["\n  display: block;\n  margin: 0;\n  padding-top: ", "px;\n  line-height: ", ";\n  color: ", ";\n  font-size: ", ";\n\n  ", ";\n"]);
  _templateObject$c = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$a = 'modals.tooltip_modal.body';
var StyledTooltipModalBody = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$a,
  'data-garden-version': '8.32.0'
})(_templateObject$c(), function (props) {
  return props.theme.space.base * 1.5;
}, function (props) {
  return getLineHeight(props.theme.lineHeights.md, props.theme.fontSizes.md);
}, function (props) {
  return props.theme.colors.foreground;
}, function (props) {
  return props.theme.fontSizes.md;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$a, props);
});
StyledTooltipModalBody.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$d() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: flex-end;\n  padding-top: ", "px;\n\n  ", ";\n"]);
  _templateObject$d = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$b = 'modals.tooltip_modal.footer';
var StyledTooltipModalFooter = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$b,
  'data-garden-version': '8.32.0'
})(_templateObject$d(), function (p) {
  return p.theme.space.base * 5;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$b, props);
});
StyledTooltipModalFooter.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$e() {
  var data = _taggedTemplateLiteral(["\n  ", ";\n"]);
  _templateObject$e = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$c = 'modals.tooltip_modal.footer_item';
var StyledTooltipModalFooterItem = styled(StyledFooterItem).attrs({
  'data-garden-id': COMPONENT_ID$c,
  'data-garden-version': '8.32.0'
})(_templateObject$e(), function (props) {
  return retrieveComponentStyles(COMPONENT_ID$c, props);
});
StyledTooltipModalFooterItem.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$f() {
  var data = _taggedTemplateLiteral(["\n  top: ", "px;\n  ", ": ", ";\n  width: ", "px;\n  height: ", "px;\n\n  ", ";\n"]);
  _templateObject$f = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$d = 'modals.tooltip_modal.close';
var StyledTooltipModalClose = styled(StyledClose).attrs({
  'data-garden-id': COMPONENT_ID$d,
  'data-garden-version': '8.32.0'
})(_templateObject$f(), function (props) {
  return props.theme.space.base * 3.5;
}, function (props) {
  return props.theme.rtl ? 'left' : 'right';
}, function (props) {
  return "".concat(props.theme.space.base * 3, "px");
}, function (props) {
  return props.theme.space.base * 8;
}, function (props) {
  return props.theme.space.base * 8;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$d, props);
});
StyledTooltipModalClose.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$g() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  position: fixed;\n  top: 0;\n  ", ": 0;\n  flex-direction: column;\n  z-index: 500;\n  box-shadow: ", ";\n  background: ", ";\n  width: ", "px;\n  height: 100%;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch; /* [1] */\n  font-family: ", ";\n  direction: ", ";\n\n  &.garden-drawer-transition-enter {\n    transform: translateX(", "px);\n  }\n\n  &.garden-drawer-transition-enter-active {\n    transform: translateX(0);\n    transition: transform 0.25s ease-in-out;\n  }\n\n  &.garden-drawer-transition-exit-active {\n    transform: translateX(", "px);\n    transition: transform 0.25s ease-in-out;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  ", ";\n"]);
  _templateObject$g = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$e = 'modals.drawer_modal';
var DRAWER_WIDTH = 380;
var boxShadow$1 = function boxShadow(props) {
  var theme = props.theme;
  var space = theme.space,
      shadows = theme.shadows;
  var offsetY = "".concat(space.base * 5, "px");
  var blurRadius = "".concat(space.base * 7, "px");
  var color = getColor('neutralHue', 800, theme, 0.35);
  return shadows.lg(offsetY, blurRadius, color);
};
var StyledDrawerModal = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$e,
  'data-garden-version': '8.32.0'
})(_templateObject$g(), function (props) {
  return props.theme.rtl ? 'left' : 'right';
}, boxShadow$1, function (props) {
  return props.theme.colors.background;
}, DRAWER_WIDTH, function (props) {
  return props.theme.fonts.system;
}, function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return props.theme.rtl ? -DRAWER_WIDTH : DRAWER_WIDTH;
}, function (props) {
  return props.theme.rtl ? -DRAWER_WIDTH : DRAWER_WIDTH;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$e, props);
});
StyledDrawerModal.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$h() {
  var data = _taggedTemplateLiteral(["\n  padding: ", "px;\n\n  ", ";\n"]);
  _templateObject$h = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$f = 'modals.drawer_modal.header';
var StyledDrawerModalHeader = styled(StyledHeader).attrs({
  'data-garden-id': COMPONENT_ID$f,
  'data-garden-version': '8.32.0'
})(_templateObject$h(), function (props) {
  return props.theme.space.base * 5;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$f, props);
});
StyledDrawerModalHeader.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$i() {
  var data = _taggedTemplateLiteral(["\n  top: ", "px;\n  width: ", "px;\n  height: ", "px;\n\n  ", ";\n"]);
  _templateObject$i = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$g = 'modals.drawer_modal.close';
var StyledDrawerModalClose = styled(StyledClose).attrs({
  'data-garden-id': COMPONENT_ID$g,
  'data-garden-version': '8.32.0'
})(_templateObject$i(), function (props) {
  return props.theme.space.base * 3.5;
}, function (props) {
  return props.theme.space.base * 8;
}, function (props) {
  return props.theme.space.base * 8;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$g, props);
});
StyledDrawerModalClose.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$j() {
  var data = _taggedTemplateLiteral(["\n  padding: ", "px;\n\n  ", ";\n"]);
  _templateObject$j = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$h = 'modals.drawer_modal.body';
var StyledDrawerModalBody = styled(StyledBody).attrs({
  'data-garden-id': COMPONENT_ID$h,
  'data-garden-version': '8.32.0'
})(_templateObject$j(), function (props) {
  return props.theme.space.base * 5;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$h, props);
});
StyledDrawerModalBody.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$k() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  flex-shrink: 0;\n  justify-content: flex-end;\n  border-top: ", ";\n  padding: ", "px;\n\n  ", ";\n"]);
  _templateObject$k = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$i = 'modals.drawer_modal.footer';
var StyledDrawerModalFooter = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$i,
  'data-garden-version': '8.32.0'
})(_templateObject$k(), function (props) {
  return "".concat(props.theme.borders.sm, " ").concat(getColor('neutralHue', 200, props.theme));
}, function (props) {
  return props.theme.space.base * 5;
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$i, props);
});
StyledDrawerModalFooter.defaultProps = {
  theme: DEFAULT_THEME
};

function _templateObject$l() {
  var data = _taggedTemplateLiteral(["\n  ", ";\n"]);
  _templateObject$l = function _templateObject() {
    return data;
  };
  return data;
}
var COMPONENT_ID$j = 'modals.drawer_modal.footer_item';
var StyledDrawerModalFooterItem = styled(StyledFooterItem).attrs({
  'data-garden-id': COMPONENT_ID$j,
  'data-garden-version': '8.32.0'
})(_templateObject$l(), function (props) {
  return retrieveComponentStyles(COMPONENT_ID$j, props);
});
StyledDrawerModalFooterItem.defaultProps = {
  theme: DEFAULT_THEME
};

var ModalsContext = createContext(undefined);
var useModalContext = function useModalContext() {
  var context = useContext(ModalsContext);
  if (context === undefined) {
    throw new Error('useModalContext must be used within a ModalsContext.Provider');
  }
  return context;
};

var isOverflowing = function isOverflowing(element) {
  var doc = ownerDocument(element);
  var win = ownerWindow(doc);
  var isBody = element && element.tagName.toLowerCase() === 'body';
  if (!isWindow(doc) && !isBody) {
    return element.scrollHeight > element.clientHeight;
  }
  var style = win.getComputedStyle(doc.body);
  var marginLeft = parseInt(style.getPropertyValue('margin-left'), 10);
  var marginRight = parseInt(style.getPropertyValue('margin-right'), 10);
  return marginLeft + doc.body.clientWidth + marginRight < win.innerWidth;
};
var Modal = React.forwardRef(function (_ref, ref) {
  var backdropProps = _ref.backdropProps,
      children = _ref.children,
      onClose = _ref.onClose,
      isLarge = _ref.isLarge,
      isCentered = _ref.isCentered,
      isAnimated = _ref.isAnimated,
      id = _ref.id,
      appendToNode = _ref.appendToNode,
      focusOnMount = _ref.focusOnMount,
      restoreFocus = _ref.restoreFocus,
      modalProps = _objectWithoutProperties(_ref, ["backdropProps", "children", "onClose", "isLarge", "isCentered", "isAnimated", "id", "appendToNode", "focusOnMount", "restoreFocus"]);
  var theme = useContext(ThemeContext);
  var modalRef = useRef(null);
  var environment = useDocument(theme);
  var _useModal = useModal({
    id: id,
    onClose: onClose,
    modalRef: modalRef,
    focusOnMount: focusOnMount,
    restoreFocus: restoreFocus
  }),
      getBackdropProps = _useModal.getBackdropProps,
      getModalProps = _useModal.getModalProps,
      getTitleProps = _useModal.getTitleProps,
      getContentProps = _useModal.getContentProps,
      getCloseProps = _useModal.getCloseProps;
  useFocusVisible({
    scope: modalRef,
    relativeDocument: environment
  });
  useEffect(function () {
    if (!environment) {
      return undefined;
    }
    var htmlElement = environment.querySelector('html');
    var bodyElement = environment.querySelector('body');
    var previousHtmlOverflow;
    var previousBodyPaddingRight;
    if (bodyElement) {
      if (isOverflowing(bodyElement)) {
        var scrollbarSize$1 = scrollbarSize();
        var bodyPaddingRight = parseInt(style(bodyElement, 'paddingRight') || '0', 10);
        previousBodyPaddingRight = bodyElement.style.paddingRight;
        bodyElement.style.paddingRight = "".concat(bodyPaddingRight + scrollbarSize$1, "px");
      }
      if (htmlElement) {
        previousHtmlOverflow = htmlElement.style.overflow;
        htmlElement.style.overflow = 'hidden';
      }
      return function () {
        if (htmlElement) {
          htmlElement.style.overflow = previousHtmlOverflow;
        }
        bodyElement.style.paddingRight = previousBodyPaddingRight;
      };
    }
    return undefined;
  }, [environment]);
  var rootNode = useMemo(function () {
    if (appendToNode) {
      return appendToNode;
    }
    if (environment) {
      return environment.body;
    }
    return undefined;
  }, [appendToNode, environment]);
  var value = {
    isLarge: isLarge,
    getTitleProps: getTitleProps,
    getContentProps: getContentProps,
    getCloseProps: getCloseProps
  };
  if (!rootNode) {
    return null;
  }
  return createPortal( React.createElement(ModalsContext.Provider, {
    value: value
  }, React.createElement(StyledBackdrop, getBackdropProps(_objectSpread2({
    isCentered: isCentered,
    isAnimated: isAnimated
  }, backdropProps)), React.createElement(StyledModal, getModalProps(_objectSpread2({
    isCentered: isCentered,
    isAnimated: isAnimated,
    isLarge: isLarge,
    ref: mergeRefs([ref, modalRef])
  }, modalProps)), children))), rootNode);
});
Modal.displayName = 'Modal';
Modal.propTypes = {
  backdropProps: PropTypes.object,
  isLarge: PropTypes.bool,
  isAnimated: PropTypes.bool,
  isCentered: PropTypes.bool,
  focusOnMount: PropTypes.bool,
  restoreFocus: PropTypes.bool,
  onClose: PropTypes.func,
  appendToNode: PropTypes.any,
  id: PropTypes.string
};
Modal.defaultProps = {
  isAnimated: true,
  isCentered: true
};

var Body = React.forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      getContentProps = _useModalContext.getContentProps;
  return React.createElement(StyledBody, _extends({
    ref: ref
  }, getContentProps(props)));
});
Body.displayName = 'Body';

function _extends$2() { _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }

var _ref$1 = /*#__PURE__*/createElement("path", {
  stroke: "currentColor",
  strokeLinecap: "round",
  d: "M3 13L13 3m0 10L3 3"
});

function SvgXStroke(props) {
  return /*#__PURE__*/createElement("svg", _extends$2({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$1);
}

var Close = React.forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      getCloseProps = _useModalContext.getCloseProps;
  return React.createElement(StyledClose, _extends({
    ref: ref
  }, getCloseProps(props)), React.createElement(SvgXStroke, null));
});
Close.displayName = 'Close';

var Footer = React.forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      isLarge = _useModalContext.isLarge;
  return React.createElement(StyledFooter, _extends({
    ref: ref,
    isLarge: isLarge
  }, props));
});
Footer.displayName = 'Footer';

var FooterItem = React.forwardRef(function (props, ref) {
  return React.createElement(StyledFooterItem, _extends({
    ref: ref
  }, props));
});
FooterItem.displayName = 'FooterItem';

var Header = React.forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      getTitleProps = _useModalContext.getTitleProps;
  return React.createElement(StyledHeader, _extends({
    ref: ref
  }, getTitleProps(props)), props.isDanger && React.createElement(StyledDangerIcon, null), props.children);
});
Header.displayName = 'Header';

var TooltipModalContext = createContext(undefined);
var useTooltipModalContext = function useTooltipModalContext() {
  var context = useContext(TooltipModalContext);
  if (context === undefined) {
    throw new Error('Element must be used within a TooltipModal component.');
  }
  return context;
};

var Title = React.forwardRef(function (props, ref) {
  var _useTooltipModalConte = useTooltipModalContext(),
      getTitleProps = _useTooltipModalConte.getTitleProps;
  return React.createElement(StyledTooltipModalTitle, _extends({
    ref: ref
  }, getTitleProps(props)), props.children);
});
Title.displayName = 'TooltipModal.Title';

var Body$1 = React.forwardRef(function (props, ref) {
  var _useTooltipModalConte = useTooltipModalContext(),
      getContentProps = _useTooltipModalConte.getContentProps;
  return React.createElement(StyledTooltipModalBody, _extends({
    ref: ref
  }, getContentProps(props)));
});
Body$1.displayName = 'TooltipModal.Body';

var Close$1 = React.forwardRef(function (props, ref) {
  var _useTooltipModalConte = useTooltipModalContext(),
      getCloseProps = _useTooltipModalConte.getCloseProps;
  return React.createElement(StyledTooltipModalClose, _extends({
    ref: ref
  }, getCloseProps(props)), React.createElement(SvgXStroke, null));
});
Close$1.displayName = 'TooltipModal.Close';

var TooltipModal = React.forwardRef(function (_ref, ref) {
  var referenceElement = _ref.referenceElement,
      popperModifiers = _ref.popperModifiers,
      placement = _ref.placement,
      onClose = _ref.onClose,
      hasArrow = _ref.hasArrow,
      isAnimated = _ref.isAnimated,
      zIndex = _ref.zIndex,
      style = _ref.style,
      backdropProps = _ref.backdropProps,
      focusOnMount = _ref.focusOnMount,
      restoreFocus = _ref.restoreFocus,
      id = _ref.id,
      props = _objectWithoutProperties(_ref, ["referenceElement", "popperModifiers", "placement", "onClose", "hasArrow", "isAnimated", "zIndex", "style", "backdropProps", "focusOnMount", "restoreFocus", "id"]);
  var theme = useContext(ThemeContext);
  var previousReferenceElementRef = useRef();
  var modalRef = useCombinedRefs(ref);
  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      popperElement = _useState2[0],
      setPopperElement = _useState2[1];
  var _useModal = useModal({
    id: id,
    onClose: onClose,
    modalRef: modalRef,
    focusOnMount: focusOnMount,
    restoreFocus: false
  }),
      getTitleProps = _useModal.getTitleProps,
      getCloseProps = _useModal.getCloseProps,
      getContentProps = _useModal.getContentProps,
      getBackdropProps = _useModal.getBackdropProps,
      getModalProps = _useModal.getModalProps;
  useEffect(function () {
    if (!referenceElement && previousReferenceElementRef.current && restoreFocus) {
      previousReferenceElementRef.current.focus();
    }
    previousReferenceElementRef.current = referenceElement;
  }, [referenceElement, restoreFocus]);
  var popperPlacement = useMemo(function () {
    return theme.rtl ? getRtlPopperPlacement(placement) : getPopperPlacement(placement);
  }, [placement, theme.rtl]);
  var _usePopper = usePopper(referenceElement, popperElement, {
    placement: popperPlacement,
    modifiers: [{
      name: 'offset',
      options: {
        offset: [0, theme.space.base * 3]
      }
    }].concat(_toConsumableArray(popperModifiers || []))
  }),
      styles = _usePopper.styles,
      attributes = _usePopper.attributes,
      state = _usePopper.state;
  var value = {
    getTitleProps: getTitleProps,
    getContentProps: getContentProps,
    getCloseProps: getCloseProps
  };
  var modalProps = getModalProps(_objectSpread2({
    ref: modalRef,
    placement: state ? state.placement : 'top',
    hasArrow: hasArrow,
    isAnimated: isAnimated,
    style: style
  }, props));
  return referenceElement ? React.createElement(TooltipModalContext.Provider, {
    value: value
  }, React.createElement(StyledTooltipModalBackdrop, getBackdropProps(backdropProps), React.createElement(StyledTooltipWrapper, _extends({
    ref: setPopperElement,
    style: styles.popper,
    placement: state ? state.placement : undefined,
    zIndex: zIndex,
    isAnimated: isAnimated
  }, attributes.popper), React.createElement(StyledTooltipModal, modalProps)))) : null;
});
TooltipModal.Title = Title;
TooltipModal.Body = Body$1;
TooltipModal.Close = Close$1;
TooltipModal.Footer = StyledTooltipModalFooter;
TooltipModal.FooterItem = StyledTooltipModalFooterItem;
TooltipModal.defaultProps = {
  placement: 'auto',
  hasArrow: true,
  focusOnMount: true,
  restoreFocus: true
};
TooltipModal.propTypes = {
  referenceElement: PropTypes.any,
  popperModifiers: PropTypes.any,
  placement: PropTypes.any,
  isAnimated: PropTypes.bool,
  hasArrow: PropTypes.bool,
  zIndex: PropTypes.number,
  onClose: PropTypes.func,
  backdropProps: PropTypes.any,
  focusOnMount: PropTypes.bool,
  restoreFocus: PropTypes.bool,
  id: PropTypes.string
};

var Header$1 = React.forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      getTitleProps = _useModalContext.getTitleProps;
  return React.createElement(StyledDrawerModalHeader, _extends({
    ref: ref
  }, getTitleProps(props)));
});
Header$1.displayName = 'DrawerModal.Header';

var Body$2 = React.forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      getContentProps = _useModalContext.getContentProps;
  return React.createElement(StyledDrawerModalBody, _extends({
    ref: ref
  }, getContentProps(props)), props.children);
});
Body$2.displayName = 'DrawerModal.Body';

var Close$2 = React.forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      getCloseProps = _useModalContext.getCloseProps;
  return React.createElement(StyledDrawerModalClose, _extends({
    ref: ref
  }, getCloseProps(props)), React.createElement(SvgXStroke, null));
});
Close$2.displayName = 'DrawerModal.Close';

var DrawerModal = forwardRef(function (_ref, ref) {
  var id = _ref.id,
      isOpen = _ref.isOpen,
      onClose = _ref.onClose,
      backdropProps = _ref.backdropProps,
      appendToNode = _ref.appendToNode,
      focusOnMount = _ref.focusOnMount,
      restoreFocus = _ref.restoreFocus,
      props = _objectWithoutProperties(_ref, ["id", "isOpen", "onClose", "backdropProps", "appendToNode", "focusOnMount", "restoreFocus"]);
  var modalRef = useRef(null);
  var theme = useContext(ThemeContext);
  var environment = useDocument(theme);
  useFocusVisible({
    scope: modalRef,
    relativeDocument: modalRef.current
  });
  var _useModal = useModal({
    id: id,
    modalRef: modalRef,
    focusOnMount: focusOnMount,
    restoreFocus: restoreFocus,
    environment: environment,
    onClose: onClose
  }),
      getTitleProps = _useModal.getTitleProps,
      getCloseProps = _useModal.getCloseProps,
      getContentProps = _useModal.getContentProps,
      getBackdropProps = _useModal.getBackdropProps,
      getModalProps = _useModal.getModalProps;
  useEffect(function () {
    if (!environment) {
      return undefined;
    }
    var htmlElement = environment.querySelector('html');
    var previousHtmlOverflow;
    if (htmlElement && isOpen) {
      previousHtmlOverflow = htmlElement.style.overflow;
      htmlElement.style.overflow = 'hidden';
    }
    return function () {
      if (htmlElement && isOpen) {
        htmlElement.style.overflow = previousHtmlOverflow;
      }
    };
  }, [environment, isOpen]);
  var rootNode = useMemo(function () {
    if (appendToNode) {
      return appendToNode;
    }
    if (environment) {
      return environment.body;
    }
    return undefined;
  }, [appendToNode, environment]);
  var value = {
    getTitleProps: getTitleProps,
    getContentProps: getContentProps,
    getCloseProps: getCloseProps
  };
  if (!rootNode) {
    return null;
  }
  var modalProps = isOpen ? getModalProps(_objectSpread2({
    ref: mergeRefs([ref, modalRef])
  }, props)) : props;
  return ReactDOM.createPortal( React.createElement(ModalsContext.Provider, {
    value: value
  }, React.createElement(CSSTransition, {
    in: isOpen,
    timeout: 250,
    unmountOnExit: true,
    classNames: "garden-drawer-transition"
  }, React.createElement(StyledDrawerModal, modalProps)), isOpen && React.createElement(StyledBackdrop, getBackdropProps(_objectSpread2({
    isAnimated: true
  }, backdropProps)))), rootNode);
});
DrawerModal.Header = Header$1;
DrawerModal.Body = Body$2;
DrawerModal.Close = Close$2;
DrawerModal.Footer = StyledDrawerModalFooter;
DrawerModal.FooterItem = StyledDrawerModalFooterItem;
DrawerModal.displayName = 'DrawerModal';
DrawerModal.propTypes = {
  backdropProps: PropTypes.object,
  focusOnMount: PropTypes.bool,
  restoreFocus: PropTypes.bool,
  onClose: PropTypes.func,
  appendToNode: PropTypes.any,
  id: PropTypes.string,
  isOpen: PropTypes.bool
};

export { Body, Close, DrawerModal, Footer, FooterItem, Header, Modal, TooltipModal };
